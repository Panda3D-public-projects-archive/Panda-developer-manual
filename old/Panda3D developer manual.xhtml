<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by LibreOffice - see http://cgit.freedesktop.org/libreoffice/core/tree/filter/source/xslt for the code.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.issued" content="2014-10-30T17:49:10.231000000" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.modified" content="2014-11-02T14:44:30.744000000" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.Contents_20_1 { font-size:14pt; font-family:Liberation Serif; writing-mode:page; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-weight:bold; }
	.Contents_20_2 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-left:0.499cm; margin-right:0cm; text-indent:0cm; }
	.Contents_20_3 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-left:0.998cm; margin-right:0cm; text-indent:0cm; }
	.Contents_20_5 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-left:1.997cm; margin-right:0cm; text-indent:0cm; }
	.Contents_20_6 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-left:2.496cm; margin-right:0cm; text-indent:0cm; }
	.Contents_20_7 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-left:2.995cm; margin-right:0cm; text-indent:0cm; }
	.Contents_20_Heading { font-size:16pt; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Liberation Sans; writing-mode:page; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-weight:bold; }
	.Heading { font-size:14pt; font-family:Liberation Sans; writing-mode:page; margin-top:0.423cm; margin-bottom:0.212cm; }
	.Heading_20_1 { font-size:130%; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Liberation Sans; writing-mode:page; font-weight:bold; }
	.Heading_20_2 { font-size:250%; margin-bottom:0.212cm; margin-top:0.353cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; color:#000000; font-weight:bold; }
	.Heading_20_3 { font-size:14pt; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; color:#000000; font-weight:bold; }
	.P1 { color:#000000; font-size:9pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P10 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P11 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P12 { color:#000000; font-size:13pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P13 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P14 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P15 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P16 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:left ! important; }
	.P17 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:left ! important; }
	.P18 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:left ! important; }
	.P19 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P20 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P21 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P22 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P23 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P24 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P25 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P26 { color:#000000; font-size:10pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Consolas; writing-mode:page; }
	.P27 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P28 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P29 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P3 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P30 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P31 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P32 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P33 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P34 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P35 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P36 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P37 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P38 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P39 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P4 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P40 { font-size:44pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P41 { font-size:88pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P42 { font-size:80pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P43 { font-size:88pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P44 { font-size:14pt; font-weight:bold; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P45 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P46 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P47 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P48 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P49 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P5 { color:#000000; font-size:44pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P50 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P51 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P52 { font-size:14pt; font-weight:bold; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P53 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P54 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P55 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P56 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P57 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; }
	.P58 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P59 { font-size:12pt; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P6 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P60 { font-size:130%; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Liberation Sans; writing-mode:page; }
	.P61 { font-size:130%; font-weight:bold; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Liberation Sans; writing-mode:page; }
	.P62 { color:#000000; font-size:250%; font-weight:bold; margin-bottom:0.212cm; margin-top:0.353cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P63 { color:#000000; font-size:250%; font-weight:bold; margin-bottom:0.212cm; margin-top:0.353cm; text-align:center ! important; font-family:Liberation Sans; writing-mode:page; }
	.P64 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P65 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P66 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; }
	.P67 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P68 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; }
	.P69 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P7 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P70 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P71 { color:#000000; font-size:14pt; font-weight:bold; margin-bottom:0.212cm; margin-top:0.247cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; }
	.P72 { font-size:16pt; font-weight:bold; margin-bottom:0.212cm; margin-left:0cm; margin-right:0cm; margin-top:0.423cm; text-indent:0cm; font-family:Liberation Sans; writing-mode:page; }
	.P73 { font-size:14pt; font-weight:bold; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P74 { font-size:14pt; font-weight:bold; margin-left:0cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P75 { font-size:12pt; margin-left:0.499cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P76 { font-size:12pt; margin-left:0.998cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P77 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; text-align:center ! important; }
	.P78 { font-size:12pt; margin-left:1.997cm; margin-right:0cm; text-indent:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P8 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.P9 { color:#000000; font-size:12pt; line-height:120%; margin-bottom:0cm; margin-top:0cm; font-family:Liberation Serif; writing-mode:page; }
	.Table_20_Contents { font-size:12pt; font-family:Liberation Serif; writing-mode:page; }
	.Text_20_body { font-size:12pt; font-family:Liberation Serif; writing-mode:page; margin-top:0cm; margin-bottom:0cm; line-height:120%; color:#000000; }
	.Title { font-size:80pt; margin-bottom:0.212cm; margin-top:0.423cm; font-family:Liberation Sans; writing-mode:page; text-align:center ! important; font-weight:bold; }
	._5f_code_borderStart { color:#000000; font-size:10pt; line-height:120%; margin-top:0cm; font-family:Consolas; writing-mode:page; background-color:transparent; padding-bottom:0cm;  border-bottom-style:none; }
	._5f_code { color:#000000; font-size:10pt; line-height:120%; font-family:Consolas; writing-mode:page; background-color:transparent; padding-bottom:0cm; padding-top:0cm;  border-top-style:none; border-bottom-style:none; }
	._5f_code_borderEnd { color:#000000; font-size:10pt; line-height:120%; margin-bottom:0cm; font-family:Consolas; writing-mode:page; background-color:transparent; padding-top:0cm;  border-top-style:none;}
	.Table1 { width:8.989cm; 
				margin-left:auto;margin-right:auto;
			}
	.Table2 { width:8.731cm; margin-left:0px; margin-right:auto;}
	.Table1_A1 { vertical-align:middle; background-color:#c1beea; padding:0.176cm; border-width:thin; border-style:solid; border-color:#000000; }
	.Table2_A1 { vertical-align:middle; padding:0.049cm; border-style:none; }
	.Table2_B1 { vertical-align:middle; background-color:#acb1ed; padding:0.176cm; border-width:thin; border-style:solid; border-color:#000000; }
	.Table1_A { width:8.989cm; }
	.Table2_A { width:2.902cm; }
	.Table2_B { width:2.875cm; }
	.Table2_C { width:2.955cm; }
	.Source_20_Text { font-family:Liberation Mono; }
	.T10 { font-family:Liberation Serif; }
	.T11 { color:#000000; font-family:Liberation Sans; }
	.T12 { color:#000000; font-family:Liberation Serif; }
	.T13 { color:#000000; font-family:Liberation Serif; }
	.T14 { color:#000000; font-family:Liberation Serif; }
	.T15 { color:#000000; font-family:Liberation Serif; }
	.T16 { color:#000000; font-family:Liberation Serif; }
	.T17 { color:#000000; font-family:Liberation Serif; }
	.T18 { color:#000000; font-family:Liberation Serif; }
	._5f_OOoAssemblerDirective { color:#0080ff; font-family:Courier New; }
	._5f_OOoAssemblerIdent { color:#000000; font-family:Courier New; }
	._5f_OOoAssemblerInstruction { color:#00007f; font-family:Courier New; }
	._5f_OOoAssemblerLiteral { color:#7f007f; font-family:Courier New; }
	._5f_OOoAssemblerSpecialChar { color:#008000; font-family:Courier New; }
	._5f_OOoComputerBase { color:#000000; font-family:Courier New; }
	._5f_OOoComputerComment { color:#4c4c4c; font-family:Courier New; }
	._5f_OOoComputerIdent { color:#008000; font-family:Courier New; }
	._5f_OOoComputerKeyWord { color:#000080; font-family:Courier New; }
	._5f_OOoComputerLiteral { color:#ff0000; font-family:Courier New; }
	<!-- ODF styles with no properties representable as CSS -->
	.Sect1 .Index_20_Link .T1 .T19 .T20 .T21 .T22 .T23 .T24 .T25 .T26 .T27 .T3 .T4 .T5 .T6 .T7 .T8 .T9  { }
	</style></head><body dir="ltr" style="max-width:21.001cm;margin-top:2cm; margin-bottom:2cm; margin-left:2cm; margin-right:2cm; writing-mode:lr-tb; "><p class="P40"> </p><p class="P40"> </p><p class="P40"> </p><p class="P40"> </p><p class="P40"><a name="__RefHeading__980_1663648339"/>Panda3D developer <span class="T3">manual</span></p><p class="P5"> </p><p class="P5"> </p><p class="P12"> </p><p class="P5"> </p><p class="P3"> </p><table border="0" cellspacing="0" cellpadding="0" class="Sect1"><colgroup/><p class="P72">Table of Contents</p><tr><td><p class="P74"><a href="#__RefHeading__980_1663648339">Panda3D developer manual</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__982_1663648339">Introduction</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__984_1663648339">Preface</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__3465_1309189275">Part 1</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__1737_1167907073">contrib</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1739_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1743_1167907073">ai</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1745_1167907073">contribbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1747_1167907073">panda3dtoolsgui</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1749_1167907073">sceneeditor</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__1751_1167907073">Direct</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1753_1167907073">Metalibs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1755_1167907073">direct</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1757_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1759_1167907073">actor</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1761_1167907073">autorestart</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1763_1167907073">cluster</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1765_1167907073">configfiles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1767_1167907073">controls</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1769_1167907073">dcparse</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1771_1167907073">dcparser</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1773_1167907073">deadrec</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1775_1167907073">directbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1777_1167907073">directd</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1779_1167907073">directdevices</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1781_1167907073">directdServer</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1783_1167907073">directnotify</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1785_1167907073">directscripts</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1787_1167907073">directtools</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1789_1167907073">directutil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1791_1167907073">distributed</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1793_1167907073">doc</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1795_1167907073">extensions</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1797_1167907073">extensions_native</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1799_1167907073">ffi</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1801_1167907073">filter</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1803_1167907073">fsm</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1805_1167907073">gui</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1807_1167907073">heapq</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1809_1167907073">http</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1811_1167907073">interval</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1813_1167907073">leveleditor</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1815_1167907073">motiontrail</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1817_1167907073">p3d</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1819_1167907073">particles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1821_1167907073">physics</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1823_1167907073">plugin</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1825_1167907073">plugin_activex</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1827_1167907073">plugin_installer</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1829_1167907073">plugin_npapi</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1831_1167907073">plugin_standalone</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1833_1167907073">pyinst</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1835_1167907073">showbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__3585_869075401"/></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1837_1167907073">showutil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1839_1167907073">stdpy</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1841_1167907073">task</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1843_1167907073">test</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1845_1167907073">tkpanels</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1847_1167907073">tkwidgets</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1849_1167907073">Wxwidgets</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__1851_1167907073">Dmodels</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1853_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1855_1167907073">Audio</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__1857_1167907073">sfx</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1963_1167907073">fonts</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1965_1167907073">gui</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1967_1167907073">icons</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1969_1167907073">level_editor</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1971_1167907073">maps</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1973_1167907073">misc</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__1975_1167907073">doc</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__1977_1167907073">dtool</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1979_1167907073">metalibs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1981_1167907073">dtool</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1983_1167907073">dtoolconfig</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1985_1167907073">pptempl</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__1987_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1989_1167907073">attach</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1991_1167907073">cppparser</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1993_1167907073">dconfig</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1995_1167907073">dtoolbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1997_1167907073">dtoolutil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__1999_1167907073">interrogate</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2001_1167907073">interrogatedb</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2003_1167907073">newheader</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2005_1167907073">parser-inc</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2033_1167907073">android</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2035_1167907073">AR</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2037_1167907073">libavcodec</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2039_1167907073">libavformat</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2041_1167907073">libavutil</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2043_1167907073">libswscale</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2045_1167907073">ode</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2047_1167907073">ogg</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__2049_1167907073">vorbis</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2007_1167907073">prc</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2009_1167907073">prckeys</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2011_1167907073">pystub</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2059_1167907073">test_interrogate</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2051_1167907073">makepanda</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2053_1167907073">models</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2055_1167907073">maps</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2057_1167907073">plugin_images</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2061_1167907073">Panda</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2063_1167907073">metalibs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2065_1167907073">panda</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2067_1167907073">pandabullet</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2069_1167907073">pandadx8</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2071_1167907073">pandadx9</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2073_1167907073">pandaegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2075_1167907073">pandaexpress</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2077_1167907073">pandafx</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2079_1167907073">pandagl</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2081_1167907073">pandagles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2083_1167907073">pandagles2</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2085_1167907073">pandaode</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2087_1167907073">pandaphysics</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2089_1167907073">pandaphysx</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2091_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2093_1167907073">android</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2095_1167907073">androiddisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2097_1167907073">audio</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2099_1167907073">audiotraits</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2101_1167907073">awesomium</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2103_1167907073">bullet</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2105_1167907073">cftalk</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2107_1167907073">chan</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2109_1167907073">char</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2111_1167907073">cocoadisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2113_1167907073">collada</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2115_1167907073">collide</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2117_1167907073">configfiles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2119_1167907073">cull</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2121_1167907073">device</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2123_1167907073">dgraph</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2125_1167907073">display</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2127_1167907073">distort</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2129_1167907073">doc</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2131_1167907073">downloader</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2133_1167907073">downloadertools</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2135_1167907073">dxgsg8</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2137_1167907073">dxgsg9</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2139_1167907073">dxml</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2141_1167907073">effects</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2143_1167907073">egg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2145_1167907073">Egg2pg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2147_1167907073">egldisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2149_1167907073">event</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2151_1167907073">express</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2153_1167907073">ffmpeg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2155_1167907073">framework</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2157_1167907073">gles2gsg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2159_1167907073">glesgsg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2161_1167907073">glgsg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2163_1167907073">glstuff</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2165_1167907073">glxdisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2167_1167907073">gobj</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2169_1167907073">grutil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2171_1167907073">gsgbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2173_1167907073">gsgmisc</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2175_1167907073">iphone</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2177_1167907073">iphonedisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2179_1167907073">linmath</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2181_1167907073">mathutil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2183_1167907073">movies</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2185_1167907073">nativenet</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2187_1167907073">net</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2189_1167907073">ode</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2191_1167907073">osxdisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2193_1167907073">pandabase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2195_1167907073">parametrics</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2197_1167907073">particlesystem</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2199_1167907073">pgraph</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2201_1167907073">pgraphnodes</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2203_1167907073">pgui</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2205_1167907073">physics</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2207_1167907073">physx</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2209_1167907073">pipeline</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2211_1167907073">pnmimage</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2213_1167907073">pnmimagetypes</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2215_1167907073">pnmtext</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2217_1167907073">ps2display (defunct)</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2219_1167907073">ps2gsg (defunct)</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2221_1167907073">pstatclient</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2223_1167907073">putil</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2225_1167907073">recorder</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2227_1167907073">rocket</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2229_1167907073">skel</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2231_1167907073">speedtree</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2233_1167907073">testbed</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2235_1167907073">text</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2237_1167907073">tform</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2239_1167907073">tinydisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2241_1167907073">vision</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2243_1167907073">vrpn</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2245_1167907073">wgldisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2247_1167907073">windisplay</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2249_1167907073">x11display</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2251_1167907073">pandatool</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2253_1167907073">src</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2255_1167907073">assimp</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2257_1167907073">bam</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2259_1167907073">configfiles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2261_1167907073">converter</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2263_1167907073">cvscopy</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2265_1167907073">daeegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2267_1167907073">daeprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2269_1167907073">dxf</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2271_1167907073">dxfegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2273_1167907073">dxfprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2275_1167907073">egg-mkfont</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2277_1167907073">egg-optchar</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2279_1167907073">egg-palettize</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2281_1167907073">egg-qtess</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2283_1167907073">eggbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2285_1167907073">eggcharbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2287_1167907073">eggprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2289_1167907073">flt</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2291_1167907073">fltegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2293_1167907073">fltprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2295_1167907073">gtk-stats</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2297_1167907073">imagebase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2299_1167907073">imageprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2301_1167907073">lwo</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2303_1167907073">lwoegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2305_1167907073">lwoprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2307_1167907073">maxegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2309_1167907073">maxprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2311_1167907073">maya</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2313_1167907073">mayaegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2315_1167907073">mayaprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2317_1167907073">miscprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2319_1167907073">objegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2321_1167907073">objprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2323_1167907073">palettizer</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2325_1167907073">pandatoolbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2327_1167907073">pfmprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2329_1167907073">progbase</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2331_1167907073">pstatserver</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2333_1167907073">ptloader</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2335_1167907073">scripts</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2337_1167907073">softegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2339_1167907073">softprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2341_1167907073">text-stats</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2343_1167907073">vrml</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2345_1167907073">vrmlegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2347_1167907073">vrmlprogs</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2349_1167907073">win-stats</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2351_1167907073">xfile</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2353_1167907073">xfileegg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2355_1167907073">xfileprogs</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2357_1167907073">ppremake</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2359_1167907073">samples</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2013_1167907073">Asteroids</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2361_1167907073">Ball-in-Maze</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2363_1167907073">Boxing-Robots</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2365_1167907073">Bump-Mapping</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2367_1167907073">Carousel</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2369_1167907073">Cartoon-Shader</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2371_1167907073">Chessboard</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2373_1167907073">Disco-Lights</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2375_1167907073">Distortion</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2377_1167907073">Fireflies</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2379_1167907073">Fractal-Plants</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2381_1167907073">Glow-Filter</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2383_1167907073">Infinite-Tunnel</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2385_1167907073">Looking-and-Gripping</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2387_1167907073">Media-Player</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2389_1167907073">Motion-Trails</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2391_1167907073">Music-Box</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2393_1167907073">Particles</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2395_1167907073">Procedural-Cube</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2397_1167907073">Roaming-Ralph</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2399_1167907073">Shadows</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2401_1167907073">Solar-System</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2403_1167907073">Teapot-on-TV</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2405_1167907073">Texture-Swapping</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__2407_1167907073">thirdparty</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2409_1167907073">Pmw</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2411_1167907073">win-extras</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2413_1167907073">JOD</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2415_1167907073">phidgets</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2417_1167907073">serial</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2419_1167907073">smartroom</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2421_1167907073">win-libs-vc10-x64</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2423_1167907073">artoolkit</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2425_1167907073">bullet</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2427_1167907073">eigen</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2429_1167907073">extras</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2431_1167907073">fcollada</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2433_1167907073">ffmpeg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2435_1167907073">fmodex</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2437_1167907073">freetype</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2439_1167907073">jpeg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2441_1167907073">npapi</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2443_1167907073">nvidiacg</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2445_1167907073">ode</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2447_1167907073">openal</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2449_1167907073">openssl</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2451_1167907073">ovr</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2453_1167907073">png</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2455_1167907073">rocket</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2457_1167907073">squish</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2459_1167907073">tiff</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2461_1167907073">vorbis</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2463_1167907073">vrpn</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__2465_1167907073">zlib</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2467_1167907073">win-nsis</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2469_1167907073">win-python-x64</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__2471_1167907073">win-util</a></p></td></tr><tr><td><p class="P74"><a href="#__RefHeading__3467_1309189275">Part 2</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__3589_869075401">The Graphics Engine</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__4096_869075401">GraphicsPipe</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__4098_869075401">GraphicsWindow and GraphicsBuffer</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__4100_869075401">GraphicsStateGuardian</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__3853_869075401">Rendering a frame</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__3855_869075401">Using a GraphicsEngine to create windows and buffers</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__3857_869075401">Sharing graphics contexts</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__3859_869075401">Closing windows</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__3861_869075401">ppython</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__4102_869075401">Panda Audio Documenation</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__4104_869075401">AudioManager and AudioSound</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__4106_869075401">Example Usage</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__4108_869075401">Python Example:</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__4110_869075401">C++ Example:</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__4112_869075401">Coding style</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7656_869075401">COLLISION FLAGS</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7658_869075401">egg palettize</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7660_869075401">HOW TO USE EGG_PALETTIZE</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7662_869075401">GROUPING EGG FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7664_869075401">CONTROLLING TEXTURE PARAMETERS</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7666_869075401">RUNNING EGG-PALETTIZE</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7668_869075401">WHEN THINGS GO WRONG</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7670_869075401">THE PHILOSOPHY OF EGG FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7672_869075401">GENERAL EGG SYNTAX</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7674_869075401">LOCAL INFORMATION ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7676_869075401">GLOBAL INFORMATION ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7678_869075401">GEOMETRY ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7680_869075401">PARAMETRIC DESCRIPTION ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7682_869075401">MORPH DESCRIPTION ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7684_869075401">GROUPING ENTRIES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7686_869075401">GROUP BINARY ATTRIBUTES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7688_869075401">GROUP SCALARS</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7690_869075401">OTHER GROUP ATTRIBUTES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7692_869075401">&lt;Collide&gt; name { type [flags] }</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7694_869075401">Plane</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7696_869075401">Polygon</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7698_869075401">Polyset</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7700_869075401">Sphere</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7702_869075401">Box</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7704_869075401">InvSphere</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7706_869075401">Tube</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7708_869075401">&lt;ObjectType&gt; { type }</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7710_869075401">barrier</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7712_869075401">trigger</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7714_869075401">sphere</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7716_869075401">tube</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7718_869075401">bubble</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7720_869075401">ghost</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7722_869075401">backstage</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7724_869075401">MISCELLANEOUS</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7726_869075401">ANIMATION STRUCTURE</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7731_869075401">HOW TO CONTROL RENDER ORDER</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7733_869075401">CULL BINS</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7897_869075401">How to make multipart actor</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7899_869075401">MULTIPART ACTORS vs. HALF-BODY ANIMATION</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7901_869075401">BROAD OVERVIEW</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7903_869075401">MORE DETAILS</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7905_869075401">NUTS AND BOLTS</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__7908_869075401">MULTIGEN MODEL FLAGS</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7910_869075401">QUICKREF</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7912_869075401">DETAILS</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7914_869075401">HANDLES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7916_869075401">BEHAVIORS</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7918_869075401">Descriptions</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7920_869075401">IMPORTANT NOTE</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__7922_869075401">PROPERTIES</a></p></td></tr><tr><td><p class="P78"><a href="#__RefHeading__7924_869075401">NOTES</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__31226_1927442421">Multi-Texturing in Maya</a></p></td></tr><tr><td><p class="P75"><a href="#__RefHeading__31228_1927442421">Config</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31230_1927442421">USING THE PRC FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31232_1927442421">DEFINING CONFIG VARIABLES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31234_1927442421">DIRECTLY ASSIGNING CONFIG VARIABLES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31236_1927442421">QUERYING CONFIG VARIABLES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31238_1927442421">RE-READING PRC FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31240_1927442421">RUNTIME PRC FILE MANAGEMENT</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31242_1927442421">COMPILE-TIME OPTIONS FOR FINDING PRC FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31244_1927442421">EXECUTABLE PRC FILES</a></p></td></tr><tr><td><p class="P76"><a href="#__RefHeading__31246_1927442421">SIGNED PRC FILES</a></p></td></tr></table><p class="P4"> </p><h1 class="P61"><a id="a__Introduction"><span/></a><a name="__RefHeading__982_1663648339"/>Introduction</h1><p class="P6">Hi, <span class="T5">I'm</span> frainfreeze.</p><p class="P6">This manual was made so I don't forget all the useful info other Panda3D deve<span class="T4">l</span>opers told me.<br/>I hope it will scale and eventua<span class="T4">l</span>ly become big enough to be called official and to actual<span class="T4">l</span>y help someone. </p><p class="P6">I want to excuse for my poor English.</p><p class="P6">Huge, tera, extra , super 'thank you' to Panda community especially rdb who activ<span class="T4">e</span>ly maintains Panda and <span class="T5">of course</span> others behind the scenes.</p><p class="P6"> </p><p class="P6"> </p><p class="P6"> </p><p class="P6"> </p><p class="P13">#note for manual writers </p><p class="P9">#info for .odt book source</p><p class="P9">-Made in LibreOffice</p><p class="P9"><span> Version: 4.3.2.2</span></p><p class="P9"><span> Build ID: edfb5295ba211bd31ad47d0bad0118690f76407d</span></p><p class="P9">-Added plug ins: </p><p class="P9"><span> <span class="T6">1.</span></span></p><p class="P9"><span> Macro Formatter 3.0.4 </span><br/><span> Copyright (c) Andrew Pitonyak</span></p><p class="P9"><span> <span class="T6">2.</span></span></p><p class="P9"><span> <span class="T6">Witer2LaTeX export filters 1.2.1</span></span></p><p class="P9"><span> </span></p><h1 class="P60"><a id="a__Preface"><span/></a><a name="__RefHeading__984_1663648339"/>Preface</h1><p class="P8">Book is organized in tree structure that follows panda 1.9 source tree.</p><p class="P7">It's bad, messy, confusing.</p><p class="P7">It also contains doc strings and comments from scripts.</p><p class="P13">Manual is built from se<span class="T1">ve</span>ral parts.<br/>1. <span> Source structured. It follows structure of panda source and notes are sorted in same way, </span><span> under each item in tree.</span></p><p class="P13">2.<span> <span class="T1">File formats, specifications and similar</span></span></p><p class="P19">3. <span> Miscellaneous and F.A.Q.</span></p><p class="P20"><span class="_5f_OOoComputerKeyWord"><span class="T16">4.        Appendix (Can contain code snippets or even whole scripts)</span></span></p><p class="P20"> </p><p class="P20"> </p><p class="P21"><span class="_5f_OOoComputerKeyWord"><span class="T18">Note:</span></span></p><p class="P21"><span class="_5f_OOoComputerKeyWord"><span class="T18">Maunal may be from 2014 but contents are much older. Some parts date from 2002 and loots of information might be deprecated. However most of Part 1 should be up to date at moment of writing.</span></span></p><p class="P21"><span class="_5f_OOoComputerKeyWord"><span class="T18"/></span></p><p class="P42"><a name="__RefHeading__3465_1309189275"/>Part 1</p><p class="P43"> </p><p class="P41"> </p><p class="Title"><a name="__RefHeading__1737_1167907073"/>contrib</p><p class="P34">Code contributed by the community.</p><p class="P34">This code is usually not maintained</p><p class="P34">by the developers but by the respective</p><p class="P34">community contributors</p><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__1739_1167907073"/>src</h2><h3 class="P64"><a id="a__ai"><span/></a><a name="__RefHeading__1743_1167907073"/>ai</h3><h3 class="P69"><a id="a__contribbase"><span/></a><a name="__RefHeading__1745_1167907073"/>contribbase</h3><h3 class="P69"><a id="a__panda3dtoolsgui"><span/></a><a name="__RefHeading__1747_1167907073"/>panda3dtoolsgui</h3><h3 class="P69"><a id="a__sceneeditor"><span/></a><a name="__RefHeading__1749_1167907073"/>sceneeditor</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__1751_1167907073"/>Direct</p><p class="P57">Mid-level tools/subsystems which supports show development,</p><p class="P57">and scene-composition.  It contains pretty much *all* of Panda's Python code with some C++.  </p><p class="P57">Includes code which sets up and initializes PANDA (using Python</p><p class="P57">wrapper functions which call low-level C++ counterparts).  </p><p class="P57">Includes python modules for mid-level show coding systems: </p><p class="P57">actors, directdevices (high-level wrappers around low-level </p><p class="P57">input devices such as joysticks, magnetic trackers, etc.), </p><p class="P57">finite state machines, 2D gui elements,</p><p class="P57">intervals, tasks, and the DIRECT tk widget classes and panels.</p><h2 class="P62"><a id="a__Metalibs"><span/></a><a name="__RefHeading__1753_1167907073"/>Metalibs</h2><h3 class="P64"><a id="a__direct"><span/></a><a name="__RefHeading__1755_1167907073"/>direct</h3><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__1757_1167907073"/>src</h2><h3 class="P69"><a id="a__actor"><span/></a><a name="__RefHeading__1759_1167907073"/>actor</h3><h3 class="P69"><a id="a__autorestart"><span/></a><a name="__RefHeading__1761_1167907073"/>autorestart</h3><h3 class="P69"><a id="a__cluster"><span/></a><a name="__RefHeading__1763_1167907073"/>cluster</h3><h3 class="P69"><a id="a__configfiles"><span/></a><a name="__RefHeading__1765_1167907073"/>configfiles</h3><h3 class="P69"><a id="a__controls"><span/></a><a name="__RefHeading__1767_1167907073"/>controls</h3><h3 class="P69"><a id="a__dcparse"><span/></a><a name="__RefHeading__1769_1167907073"/>dcparse</h3><h3 class="P69"><a id="a__dcparser"><span/></a><a name="__RefHeading__1771_1167907073"/>dcparser</h3><h3 class="P69"><a id="a__deadrec"><span/></a><a name="__RefHeading__1773_1167907073"/>deadrec</h3><h3 class="P69"><a id="a__directbase"><span/></a><a name="__RefHeading__1775_1167907073"/>directbase</h3><h3 class="P69"><a id="a__directd"><span/></a><a name="__RefHeading__1777_1167907073"/>directd</h3><h3 class="P69"><a id="a__directdevices"><span/></a><a name="__RefHeading__1779_1167907073"/>directdevices</h3><h3 class="P69"><a id="a__directdServer"><span/></a><a name="__RefHeading__1781_1167907073"/>directdServer</h3><h3 class="P69"><a id="a__directnotify"><span/></a><a name="__RefHeading__1783_1167907073"/>directnotify</h3><h3 class="P69"><a id="a__directscripts"><span/></a><a name="__RefHeading__1785_1167907073"/>directscripts</h3><h3 class="P69"><a id="a__directtools"><span/></a><a name="__RefHeading__1787_1167907073"/>directtools</h3><h3 class="P69"><a id="a__directutil"><span/></a><a name="__RefHeading__1789_1167907073"/>directutil</h3><h3 class="P69"><a id="a__distributed"><span/></a><a name="__RefHeading__1791_1167907073"/>distributed</h3><h3 class="P69"><a id="a__doc"><span/></a><a name="__RefHeading__1793_1167907073"/>doc</h3><h3 class="P69"><a id="a__extensions"><span/></a><a name="__RefHeading__1795_1167907073"/>extensions</h3><h3 class="P69"><a id="a__extensions_native"><span/></a><a name="__RefHeading__1797_1167907073"/>extensions_native</h3><h3 class="P69"><a id="a__ffi"><span/></a><a name="__RefHeading__1799_1167907073"/>ffi</h3><h3 class="P69"><a id="a__filter"><span/></a><a name="__RefHeading__1801_1167907073"/>filter</h3><h3 class="P69"><a id="a__fsm"><span/></a><a name="__RefHeading__1803_1167907073"/>fsm</h3><h3 class="P69"><a id="a__gui"><span/></a><a name="__RefHeading__1805_1167907073"/>gui</h3><h3 class="P69"><a id="a__heapq"><span/></a><a name="__RefHeading__1807_1167907073"/>heapq</h3><h3 class="P69"><a id="a__http"><span/></a><a name="__RefHeading__1809_1167907073"/>http</h3><h3 class="P69"><a id="a__interval"><span/></a><a name="__RefHeading__1811_1167907073"/>interval</h3><h3 class="P69"><a id="a__leveleditor"><span/></a><a name="__RefHeading__1813_1167907073"/>leveleditor</h3><h3 class="P69"><a id="a__motiontrail"><span/></a><a name="__RefHeading__1815_1167907073"/>motiontrail</h3><h3 class="P69"><a id="a__p3d"><span/></a><a name="__RefHeading__1817_1167907073"/>p3d</h3><h3 class="P69"><a id="a__particles"><span/></a><a name="__RefHeading__1819_1167907073"/>particles</h3><h3 class="P69"><a id="a__physics"><span/></a><a name="__RefHeading__1821_1167907073"/>physics</h3><h3 class="P69"><a id="a__plugin"><span/></a><a name="__RefHeading__1823_1167907073"/>plugin</h3><h3 class="P69"><a id="a__plugin_activex"><span/></a><a name="__RefHeading__1825_1167907073"/>plugin_activex</h3><h3 class="P69"><a id="a__plugin_installer"><span/></a><a name="__RefHeading__1827_1167907073"/>plugin_installer</h3><h3 class="P69"><a id="a__plugin_npapi"><span/></a><a name="__RefHeading__1829_1167907073"/>plugin_npapi</h3><h3 class="P69"><a id="a__plugin_standalone"><span/></a><a name="__RefHeading__1831_1167907073"/>plugin_standalone</h3><h3 class="P69"><a id="a__pyinst"><span/></a><a name="__RefHeading__1833_1167907073"/>pyinst</h3><h3 class="P69"><a id="a__showbase"><span/></a><a name="__RefHeading__1835_1167907073"/>showbase</h3><p class="P18">$DIRECT/src/showbase/ShowBase.py</p><p class="P17"><span class="T1">B</span>ase is the catchall global that creates and holds useful global methods for running Panda.</p><p class="P16"> </p><h3 class="P69"><a id="a__showutil"><span/></a><a name="__RefHeading__1837_1167907073"/>showutil</h3><h3 class="P69"><a id="a__stdpy"><span/></a><a name="__RefHeading__1839_1167907073"/>stdpy</h3><h3 class="P69"><a id="a__task"><span/></a><a name="__RefHeading__1841_1167907073"/>task</h3><h3 class="P69"><a id="a__test"><span/></a><a name="__RefHeading__1843_1167907073"/>test</h3><h3 class="P69"><a id="a__tkpanels"><span/></a><a name="__RefHeading__1845_1167907073"/>tkpanels</h3><h3 class="P69"><a id="a__tkwidgets"><span/></a><a name="__RefHeading__1847_1167907073"/>tkwidgets</h3><h3 class="P69"><a id="a__Wxwidgets"><span/></a><a name="__RefHeading__1849_1167907073"/>Wxwidgets</h3><p class="P10"> </p><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__1851_1167907073"/>Dmodels</p><p class="P10">Similar to /models but processed by ppremake, models that </p><p class="P11"><span> </span><span> still need to be converted to .egg at build time</span></p><p class="P11">The<span class="T21">ir</span> origin is probably Disney</p><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__1853_1167907073"/>src</h2><p class="Text_20_body"> </p><h3 class="P69"><a id="a__Audio"><span/></a><a name="__RefHeading__1855_1167907073"/>Audio</h3><p class="P52"><a name="__RefHeading__1857_1167907073"/>sfx</p><h3 class="P69"><a id="a__fonts"><span/></a><a name="__RefHeading__1963_1167907073"/>fonts</h3><h3 class="P69"><a id="a__gui"><span/></a><a name="__RefHeading__1965_1167907073"/>gui</h3><h3 class="P69"><a id="a__icons"><span/></a><a name="__RefHeading__1967_1167907073"/>icons</h3><h3 class="P69"><a id="a__level_editor"><span/></a><a name="__RefHeading__1969_1167907073"/>level_editor</h3><h3 class="P69"><a id="a__maps"><span/></a><a name="__RefHeading__1971_1167907073"/>maps</h3><h3 class="P69"><a id="a__misc"><span/></a><a name="__RefHeading__1973_1167907073"/>misc</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__1975_1167907073"/><span class="T22">d</span>oc</p><p class="P35">Contains release notes, panda3d description,</p><p class="P35">panda3d licence, old release notes and instructions</p><p class="P35">for compiling panda3d with ppremake and makepanda.</p><p class="P42"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__1977_1167907073"/>dtool</p><p class="P58">This tree contains base classes and core functionality that the</p><p class="P58">other Panda libraries rely on, such as basic threading constructs, </p><p class="P58">file reading/writing constructs and the configuration system. </p><p class="P58">It also contains interrogate, which is used to generate Python bindings for Panda3D.</p><h2 class="P62"><a id="a__metalibs"><span/></a><a name="__RefHeading__1979_1167907073"/>metalibs</h2><h3 class="P69"><a id="a__dtool"><span/></a><a name="__RefHeading__1981_1167907073"/>dtool</h3><h3 class="P69"><a id="a__dtoolconfig"><span/></a><a name="__RefHeading__1983_1167907073"/>dtoolconfig</h3><h2 class="P62"><a id="a__pptempl"><span/></a><a name="__RefHeading__1985_1167907073"/>pptempl</h2><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__1987_1167907073"/>src</h2><h3 class="P69"><a id="a__attach"><span/></a><a name="__RefHeading__1989_1167907073"/>attach</h3><h3 class="P69"><a id="a__cppparser"><span/></a><a name="__RefHeading__1991_1167907073"/>cppparser</h3><h3 class="P69"><a id="a__dconfig"><span/></a><a name="__RefHeading__1993_1167907073"/>dconfig</h3><h3 class="P69"><a id="a__dtoolbase"><span/></a><a name="__RefHeading__1995_1167907073"/>dtoolbase</h3><h3 class="P69"><a id="a__dtoolutil"><span/></a><a name="__RefHeading__1997_1167907073"/>dtoolutil</h3><h3 class="P69"><a id="a__interrogate"><span/></a><a name="__RefHeading__1999_1167907073"/>interrogate</h3><h3 class="P69"><a id="a__interrogatedb"><span/></a><a name="__RefHeading__2001_1167907073"/>interrogatedb</h3><h3 class="P69"><a id="a__newheader"><span/></a><a name="__RefHeading__2003_1167907073"/>newheader</h3><h3 class="P69"><a id="a__parser-inc"><span/></a><a name="__RefHeading__2005_1167907073"/>parser-inc</h3><p class="P44"><a name="__RefHeading__2033_1167907073"/>android</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2035_1167907073"/>AR</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2037_1167907073"/>libavcodec</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2039_1167907073"/>libavformat</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2041_1167907073"/>libavutil</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2043_1167907073"/>libswscale</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2045_1167907073"/>ode</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2047_1167907073"/>ogg</p><p class="P52"> </p><p class="P44"><a name="__RefHeading__2049_1167907073"/>vorbis</p><h3 class="P69"><a id="a__prc"><span/></a><a name="__RefHeading__2007_1167907073"/>prc</h3><h3 class="P69"><a id="a__prckeys"><span/></a><a name="__RefHeading__2009_1167907073"/>prckeys</h3><h3 class="P69"><a id="a__pystub"><span/></a><a name="__RefHeading__2011_1167907073"/>pystub</h3><h3 class="P70"><a id="a__test_interrogate"><span/></a><a name="__RefHeading__2059_1167907073"/>test_interrogate</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2051_1167907073"/><span class="T23">m</span>akepanda</p><p class="P77">Panda3D building system.</p><p class="P42"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2053_1167907073"/><span class="T24">m</span>odels</p><p class="P36">Contains some free models for use in samples.</p><p class="P36">They origin is probably CMU</p><h2 class="P62"><a id="a__maps"><span/></a><a name="__RefHeading__2055_1167907073"/>maps</h2><h2 class="P62"><a id="a__plugin_images"><span/></a><a name="__RefHeading__2057_1167907073"/>plugin_images</h2><p class="P42"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2061_1167907073"/>Panda</p><p class="P59">Low-level 3D graphics engine code.  Primarily C++. </p><p class="P59">Includes code for graphics/scene graph setup/manipulation/rendering,</p><p class="P59">graphic state guardians (interfaces to OpenGL, Direct X, tinypanda(based on TinyGL)), </p><p class="P59">and source code for many PANDA systems:</p><p class="P59">animation, audio, gui, input devices, particles, physics, shaders, etc.</p><p class="P45"> </p><h2 class="Heading_20_2"><a id="a__metalibs"><span/></a><a name="__RefHeading__2063_1167907073"/>metalibs</h2><h3 class="P69"><a id="a__panda"><span/></a><a name="__RefHeading__2065_1167907073"/>panda</h3><h3 class="P69"><a id="a__pandabullet"><span/></a><a name="__RefHeading__2067_1167907073"/>pandabullet</h3><p class="Text_20_body">Panda has classes that represent underlying bullet objects, that basically wrap around it and integrate it with Panda classes and structures.</p><p class="Text_20_body">For instance, there's BulletRigidBodyNode, which is a class that extends a PandaNode and as such can be placed inside the panda scene graph. </p><p class="Text_20_body"><a name="__RefHeading__3587_869075401"/>However, it stores a btRigidBody object from bullet, and exposes methods that are wrappers around that underlying Bullet object.</p><h3 class="P69"><a id="a__pandadx8"><span/></a><a name="__RefHeading__2069_1167907073"/>pandadx8</h3><h3 class="P69"><a id="a__pandadx9"><span/></a><a name="__RefHeading__2071_1167907073"/>pandadx9</h3><h3 class="P69"><a id="a__pandaegg"><span/></a><a name="__RefHeading__2073_1167907073"/>pandaegg</h3><h3 class="P69"><a id="a__pandaexpress"><span/></a><a name="__RefHeading__2075_1167907073"/>pandaexpress</h3><h3 class="P69"><a id="a__pandafx"><span/></a><a name="__RefHeading__2077_1167907073"/>pandafx</h3><h3 class="P69"><a id="a__pandagl"><span/></a><a name="__RefHeading__2079_1167907073"/>pandagl</h3><h3 class="P69"><a id="a__pandagles"><span/></a><a name="__RefHeading__2081_1167907073"/>pandagles</h3><h3 class="P69"><a id="a__pandagles2"><span/></a><a name="__RefHeading__2083_1167907073"/>pandagles2</h3><h3 class="P69"><a id="a__pandaode"><span/></a><a name="__RefHeading__2085_1167907073"/>pandaode</h3><h3 class="P69"><a id="a__pandaphysics"><span/></a><a name="__RefHeading__2087_1167907073"/>pandaphysics</h3><h3 class="P69"><a id="a__pandaphysx"><span/></a><a name="__RefHeading__2089_1167907073"/>pandaphysx</h3><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__2091_1167907073"/>src</h2><h3 class="P69"><a id="a__android"><span/></a><a name="__RefHeading__2093_1167907073"/>android</h3><h3 class="P69"><a id="a__androiddisplay"><span/></a><a name="__RefHeading__2095_1167907073"/>androiddisplay</h3><h3 class="P69"><a id="a__audio"><span/></a><a name="__RefHeading__2097_1167907073"/>audio</h3><p class="Text_20_body">Audio API for panda</p><h3 class="P69"><a id="a__audiotraits"><span/></a><a name="__RefHeading__2099_1167907073"/>audiotraits</h3><h3 class="P69"><a id="a__awesomium"><span/></a><a name="__RefHeading__2101_1167907073"/>awesomium</h3><h3 class="P69"><a id="a__bullet"><span/></a><a name="__RefHeading__2103_1167907073"/>bullet</h3><p class="Text_20_body"> </p><h3 class="P69"><a id="a__cftalk"><span/></a><a name="__RefHeading__2105_1167907073"/>cftalk</h3><h3 class="P69"><a id="a__chan"><span/></a><a name="__RefHeading__2107_1167907073"/>chan</h3><p class="Text_20_body">Animation channels.  This defines the various kinds of<br/>AnimChannels that may be defined, as well as the MovingPart class<br/>which binds to the channels and plays the animation.  This is a<br/>support library for char, as well as any other libraries that want<br/>to define objects whose values change over time.</p><h3 class="P69"><a id="a__char"><span/></a><a name="__RefHeading__2109_1167907073"/>char</h3><h3 class="P69"><a id="a__cocoadisplay"><span/></a><a name="__RefHeading__2111_1167907073"/>cocoadisplay</h3><h3 class="P69"><a id="a__collada"><span/></a><a name="__RefHeading__2113_1167907073"/>collada</h3><h3 class="P69"><a id="a__collide"><span/></a><a name="__RefHeading__2115_1167907073"/>collide</h3><p class="Text_20_body">This package contains the classes that control and detect collisions</p><h3 class="P69"><a id="a__configfiles"><span/></a><a name="__RefHeading__2117_1167907073"/>configfiles</h3><p class="Text_20_body">    This package contains the housekeeping and configuration files needed by<br/>    things like attach, and emacs.</p><h3 class="P69"><a id="a__cull"><span/></a><a name="__RefHeading__2119_1167907073"/>cull</h3><p class="Text_20_body">This package contains the Cull Traverser.  The cull traversal collects all<br/>state changes specified, and removes unneccesary state change requests.  Also<br/>does all the depth sorting for proper alphaing.</p><h3 class="P69"><a id="a__device"><span/></a><a name="__RefHeading__2121_1167907073"/>device</h3><p class="Text_20_body">Device drivers, such as mouse and keyboard, trackers, etc...  The base class for using various device APIs is here.</p><h3 class="P69"><a id="a__dgraph"><span/></a><a name="__RefHeading__2123_1167907073"/>dgraph</h3><p class="Text_20_body">Defines and manages the data graph, which is the hierarchy of devices, tforms, and any other things which might have an input or an output and need to execute every frame.</p><h3 class="P69"><a id="a__display"><span/></a><a name="__RefHeading__2125_1167907073"/>display</h3><p class="Text_20_body">    Abstract display classes, including pipes, windows, channels, and display regions.</p><h3 class="P69"><a id="a__distort"><span/></a><a name="__RefHeading__2127_1167907073"/>distort</h3><h3 class="P69"><a id="a__doc"><span/></a><a name="__RefHeading__2129_1167907073"/>doc</h3><p class="Text_20_body">Documentation <span class="T8">Panda3D developers considered </span>that doesn't fit in any of the packages.</p><p class="P24">For contents please see the “part 2” of this manual.</p><p class="P46"> </p><h3 class="P69"><a id="a__downloader"><span/></a><a name="__RefHeading__2131_1167907073"/>downloader</h3><p class="Text_20_body">Tool to allow automatic download of files in the background.</p><h3 class="P69"><a id="a__downloadertools"><span/></a><a name="__RefHeading__2133_1167907073"/>downloadertools</h3><h3 class="P69"><a id="a__dxgsg8"><span/></a><a name="__RefHeading__2135_1167907073"/>dxgsg8</h3><p class="Text_20_body">    Handles all communication with the DirectX backend, and manages state<br/>    to minimize redundant state changes.</p><h3 class="P69"><a id="a__dxgsg9"><span/></a><a name="__RefHeading__2137_1167907073"/>dxgsg9</h3><p class="Text_20_body">    Handles all communication with the DirectX backend, and manages state<br/>    to minimize redundant state changes.</p><h3 class="P69"><a id="a__dxml"><span/></a><a name="__RefHeading__2139_1167907073"/>dxml</h3><h3 class="P69"><a id="a__effects"><span/></a><a name="__RefHeading__2141_1167907073"/>effects</h3><p class="Text_20_body">Various graphics effects that aren't shaders.  I.E Lens Flares</p><h3 class="P69"><a id="a__egg"><span/></a><a name="__RefHeading__2143_1167907073"/>egg</h3><p class="Text_20_body">A.k.a. the "egg library", this reads, writes, and manipulates egg files.  It knows nothing about the scene graph structure in the rest of the player; it lives in its own little egg world.</p><h3 class="P69"><a id="a__Egg2pg"><span/></a><a name="__RefHeading__2145_1167907073"/>Egg2pg</h3><p class="Text_20_body">A.k.a. the "egg loader", this converts the egg structure read from<br/>the egg library, above, to a scene graph structure, suitable for rendering.</p><p class="P14">egg2pg reads egg file <span class="T7">and converts it to a Panda scene graph. <br/>ie. in-memory structure of PandaNode etc. <br/>I'm assuming "pg" stands for "panda graph".<br/>Also, technically, the "egg" tree reads the .egg file into in-memory<br/> EggData structures, and egg2pg converts those to scene graph structures.</span></p><p class="P15">When egg2pg converts that into  scene graph structures egg files<br/>from memory get deleted. If you want to keep them around, you can use<br/> the lower-level interfaces yourself.</p><h3 class="P69"><a id="a__egldisplay"><span/></a><a name="__RefHeading__2147_1167907073"/>egldisplay</h3><h3 class="P69"><a id="a__event"><span/></a><a name="__RefHeading__2149_1167907073"/>event</h3><p class="Text_20_body">Tools for throwing, handling and receiving events.</p><h3 class="P69"><a id="a__express"><span/></a><a name="__RefHeading__2151_1167907073"/>express</h3><h3 class="P69"><a id="a__ffmpeg"><span/></a><a name="__RefHeading__2153_1167907073"/>ffmpeg</h3><h3 class="P69"><a id="a__framework"><span/></a><a name="__RefHeading__2155_1167907073"/>framework</h3><p class="Text_20_body">A simple, stupid framework around which to write a simple, stupid<br/>    demo program.  Handy for quickly writing programs that open a<br/>    window and display the OmniTriangle.</p><h3 class="P69"><a id="a__gles2gsg"><span/></a><a name="__RefHeading__2157_1167907073"/>gles2gsg</h3><h3 class="P69"><a id="a__glesgsg"><span/></a><a name="__RefHeading__2159_1167907073"/>glesgsg</h3><h3 class="P69"><a id="a__glgsg"><span/></a><a name="__RefHeading__2161_1167907073"/>glgsg</h3><p class="Text_20_body"> Handles all communication with the GL backend, and manages state<br/>    to minimize redundant state changes.</p><h3 class="P69"><a id="a__glstuff"><span/></a><a name="__RefHeading__2163_1167907073"/>glstuff</h3><h3 class="P69"><a id="a__glxdisplay"><span/></a><a name="__RefHeading__2165_1167907073"/>glxdisplay</h3><p class="Text_20_body">X windows display classes that replace Glut functionality.</p><h3 class="P69"><a id="a__gobj"><span/></a><a name="__RefHeading__2167_1167907073"/>gobj</h3><p class="Text_20_body">Graphical non-scene-graph objects, such as textures and geometry primitives.</p><h3 class="P69"><a id="a__grutil"><span/></a><a name="__RefHeading__2169_1167907073"/>grutil</h3><h3 class="P69"><a id="a__gsgbase"><span/></a><a name="__RefHeading__2171_1167907073"/>gsgbase</h3><p class="Text_20_body">Base GSG class defined to avoid cyclical dependency build.</p><h3 class="P69"><a id="a__gsgmisc"><span/></a><a name="__RefHeading__2173_1167907073"/>gsgmisc</h3><p class="Text_20_body">Some utility functions for gsg that could not live in the same<br/>    directory for circular dependency reasons.</p><h3 class="P69"><a id="a__iphone"><span/></a><a name="__RefHeading__2175_1167907073"/>iphone</h3><h3 class="P69"><a id="a__iphonedisplay"><span/></a><a name="__RefHeading__2177_1167907073"/>iphonedisplay</h3><h3 class="P69"><a id="a__linmath"><span/></a><a name="__RefHeading__2179_1167907073"/>linmath</h3><p class="Text_20_body">Linear algebra library.</p><h3 class="P69"><a id="a__mathutil"><span/></a><a name="__RefHeading__2181_1167907073"/>mathutil</h3><p class="Text_20_body">Math utility functions, such as frustum and plane</p><h3 class="P69"><a id="a__movies"><span/></a><a name="__RefHeading__2183_1167907073"/>movies</h3><h3 class="P69"><a id="a__nativenet"><span/></a><a name="__RefHeading__2185_1167907073"/>nativenet</h3><h3 class="P69"><a id="a__net"><span/></a><a name="__RefHeading__2187_1167907073"/>net</h3><p class="Text_20_body">Net connection classes</p><h3 class="P69"><a id="a__ode"><span/></a><a name="__RefHeading__2189_1167907073"/>ode</h3><h3 class="P69"><a id="a__osxdisplay"><span/></a><a name="__RefHeading__2191_1167907073"/>osxdisplay</h3><h3 class="P69"><a id="a__pandabase"><span/></a><a name="__RefHeading__2193_1167907073"/>pandabase</h3><h3 class="P69"><a id="a__parametrics"><span/></a><a name="__RefHeading__2195_1167907073"/>parametrics</h3><h3 class="P69"><a id="a__particlesystem"><span/></a><a name="__RefHeading__2197_1167907073"/>particlesystem</h3><p class="Text_20_body">Tool for doing particle systems.  Contains various kinds of particles,<br/>    emiters, factories and renderers.</p><h3 class="P69"><a id="a__pgraph"><span/></a><a name="__RefHeading__2199_1167907073"/>pgraph</h3><h3 class="P69"><a id="a__pgraphnodes"><span/></a><a name="__RefHeading__2201_1167907073"/>pgraphnodes</h3><h3 class="P69"><a id="a__pgui"><span/></a><a name="__RefHeading__2203_1167907073"/>pgui</h3><h3 class="P69"><a id="a__physics"><span/></a><a name="__RefHeading__2205_1167907073"/>physics</h3><p class="Text_20_body">Base classes for physical objects and forces.  Also contains the<br/>    physics manager class</p><h3 class="P69"><a id="a__physx"><span/></a><a name="__RefHeading__2207_1167907073"/>physx</h3><h3 class="P69"><a id="a__pipeline"><span/></a><a name="__RefHeading__2209_1167907073"/>pipeline</h3><h3 class="P69"><a id="a__pnmimage"><span/></a><a name="__RefHeading__2211_1167907073"/>pnmimage</h3><p class="P23">Reads and writes image files in various formats, by using the pnm<br/>and tiff libraries. </p><p class="P23">PNMImage class manages reading and writing image files from disk </p><p class="P23">One of the properties of PNMImage is that all images are laid out (almost) the same way in memory, regardless of their properties. This makes it very easy to write a class like PNMPainter, which can paint equally well on grayscale, grayscale/alpha, 24-bit, 32-bit, or 64-bit images. </p><h3 class="P69"><a id="a__pnmimagetypes"><span/></a><a name="__RefHeading__2213_1167907073"/>pnmimagetypes</h3><h3 class="P69"><a id="a__pnmtext"><span/></a><a name="__RefHeading__2215_1167907073"/>pnmtext</h3><h3 class="P71"><a id="a__ps2display__defunct_"><span/></a><a name="__RefHeading__2217_1167907073"/><span class="T9">p</span>s2display <span class="T9">(defunct)</span></h3><p class="P22">Playstation 2 display classes. <span class="T9">(defunct)</span></p><h3 class="P69"><a id="a__ps2gsg__defunct_"><span/></a><a name="__RefHeading__2219_1167907073"/>ps2gsg <span class="T9">(defunct)</span></h3><p class="Text_20_body">Play station 2 specific rendering backend. <span class="T9">(defunct)</span></p><h3 class="P69"><a id="a__pstatclient"><span/></a><a name="__RefHeading__2221_1167907073"/>pstatclient</h3><h3 class="P69"><a id="a__putil"><span/></a><a name="__RefHeading__2223_1167907073"/>putil</h3><h3 class="P69"><a id="a__recorder"><span/></a><a name="__RefHeading__2225_1167907073"/>recorder</h3><h3 class="P69"><a id="a__rocket"><span/></a><a name="__RefHeading__2227_1167907073"/>rocket</h3><h3 class="P69"><a id="a__skel"><span/></a><a name="__RefHeading__2229_1167907073"/>skel</h3><h3 class="P69"><a id="a__speedtree"><span/></a><a name="__RefHeading__2231_1167907073"/>speedtree</h3><h3 class="P69"><a id="a__testbed"><span/></a><a name="__RefHeading__2233_1167907073"/>testbed</h3><p class="Text_20_body">C test programs, that primarily link with framework.</p><h3 class="P69"><a id="a__text"><span/></a><a name="__RefHeading__2235_1167907073"/>text</h3><p class="Text_20_body">Package for generating renderable text using textured polygons.</p><h3 class="P69"><a id="a__tform"><span/></a><a name="__RefHeading__2237_1167907073"/>tform</h3><p class="Text_20_body">Data transforming objects that live in the data graph and convert<br/>    raw data (as read from an input device, for instance) to something<br/>    more useful.</p><h3 class="P69"><a id="a__tinydisplay"><span/></a><a name="__RefHeading__2239_1167907073"/>tinydisplay</h3><h3 class="P69"><a id="a__vision"><span/></a><a name="__RefHeading__2241_1167907073"/>vision</h3><h3 class="P69"><a id="a__vrpn"><span/></a><a name="__RefHeading__2243_1167907073"/>vrpn</h3><p class="Text_20_body">Defines the specific client code for interfacing to the VRPN API.</p><h3 class="P69"><a id="a__wgldisplay"><span/></a><a name="__RefHeading__2245_1167907073"/>wgldisplay</h3><p class="Text_20_body">Windows OpenGL specific display classes.</p><h3 class="P69"><a id="a__windisplay"><span/></a><a name="__RefHeading__2247_1167907073"/>windisplay</h3><h3 class="P69"><a id="a__x11display"><span/></a><a name="__RefHeading__2249_1167907073"/>x11display</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2251_1167907073"/><span class="T25">p</span>andatool</p><p class="P37">This tree contains various utility tools that are used to manipulate model</p><p class="P37">files and convert models from other formats to Panda3D's .egg format (and vice versa).</p><h2 class="P62"><a id="a__src"><span/></a><a name="__RefHeading__2253_1167907073"/>src</h2><h3 class="P69"><a id="a__assimp"><span/></a><a name="__RefHeading__2255_1167907073"/>assimp</h3><h3 class="P69"><a id="a__bam"><span/></a><a name="__RefHeading__2257_1167907073"/>bam</h3><h3 class="P69"><a id="a__configfiles"><span/></a><a name="__RefHeading__2259_1167907073"/>configfiles</h3><h3 class="P69"><a id="a__converter"><span/></a><a name="__RefHeading__2261_1167907073"/>converter</h3><h3 class="P69"><a id="a__cvscopy"><span/></a><a name="__RefHeading__2263_1167907073"/>cvscopy</h3><h3 class="P69"><a id="a__daeegg"><span/></a><a name="__RefHeading__2265_1167907073"/>daeegg</h3><h3 class="P69"><a id="a__daeprogs"><span/></a><a name="__RefHeading__2267_1167907073"/>daeprogs</h3><h3 class="P69"><a id="a__dxf"><span/></a><a name="__RefHeading__2269_1167907073"/>dxf</h3><h3 class="P69"><a id="a__dxfegg"><span/></a><a name="__RefHeading__2271_1167907073"/>dxfegg</h3><h3 class="P69"><a id="a__dxfprogs"><span/></a><a name="__RefHeading__2273_1167907073"/>dxfprogs</h3><h3 class="P69"><a id="a__egg-mkfont"><span/></a><a name="__RefHeading__2275_1167907073"/>egg-mkfont</h3><h3 class="P69"><a id="a__egg-optchar"><span/></a><a name="__RefHeading__2277_1167907073"/>egg-optchar</h3><h3 class="P69"><a id="a__egg-palettize"><span/></a><a name="__RefHeading__2279_1167907073"/>egg-palettize</h3><h3 class="P69"><a id="a__egg-qtess"><span/></a><a name="__RefHeading__2281_1167907073"/>egg-qtess</h3><h3 class="P69"><a id="a__eggbase"><span/></a><a name="__RefHeading__2283_1167907073"/>eggbase</h3><h3 class="P69"><a id="a__eggcharbase"><span/></a><a name="__RefHeading__2285_1167907073"/>eggcharbase</h3><h3 class="P69"><a id="a__eggprogs"><span/></a><a name="__RefHeading__2287_1167907073"/>eggprogs</h3><h3 class="P69"><a id="a__flt"><span/></a><a name="__RefHeading__2289_1167907073"/>flt</h3><h3 class="P69"><a id="a__fltegg"><span/></a><a name="__RefHeading__2291_1167907073"/>fltegg</h3><h3 class="P69"><a id="a__fltprogs"><span/></a><a name="__RefHeading__2293_1167907073"/>fltprogs</h3><h3 class="P69"><a id="a__gtk-stats"><span/></a><a name="__RefHeading__2295_1167907073"/>gtk-stats</h3><h3 class="P69"><a id="a__imagebase"><span/></a><a name="__RefHeading__2297_1167907073"/>imagebase</h3><h3 class="P69"><a id="a__imageprogs"><span/></a><a name="__RefHeading__2299_1167907073"/>imageprogs</h3><h3 class="P69"><a id="a__lwo"><span/></a><a name="__RefHeading__2301_1167907073"/>lwo</h3><h3 class="P69"><a id="a__lwoegg"><span/></a><a name="__RefHeading__2303_1167907073"/>lwoegg</h3><h3 class="P69"><a id="a__lwoprogs"><span/></a><a name="__RefHeading__2305_1167907073"/>lwoprogs</h3><h3 class="P69"><a id="a__maxegg"><span/></a><a name="__RefHeading__2307_1167907073"/>maxegg</h3><h3 class="P69"><a id="a__maxprogs"><span/></a><a name="__RefHeading__2309_1167907073"/>maxprogs</h3><h3 class="P69"><a id="a__maya"><span/></a><a name="__RefHeading__2311_1167907073"/>maya</h3><h3 class="P69"><a id="a__mayaegg"><span/></a><a name="__RefHeading__2313_1167907073"/>mayaegg</h3><h3 class="P69"><a id="a__mayaprogs"><span/></a><a name="__RefHeading__2315_1167907073"/>mayaprogs</h3><h3 class="P69"><a id="a__miscprogs"><span/></a><a name="__RefHeading__2317_1167907073"/>miscprogs</h3><h3 class="P69"><a id="a__objegg"><span/></a><a name="__RefHeading__2319_1167907073"/>objegg</h3><h3 class="P69"><a id="a__objprogs"><span/></a><a name="__RefHeading__2321_1167907073"/>objprogs</h3><h3 class="P69"><a id="a__palettizer"><span/></a><a name="__RefHeading__2323_1167907073"/>palettizer</h3><h3 class="P69"><a id="a__pandatoolbase"><span/></a><a name="__RefHeading__2325_1167907073"/>pandatoolbase</h3><h3 class="P69"><a id="a__pfmprogs"><span/></a><a name="__RefHeading__2327_1167907073"/>pfmprogs</h3><h3 class="P69"><a id="a__progbase"><span/></a><a name="__RefHeading__2329_1167907073"/>progbase</h3><h3 class="P69"><a id="a__pstatserver"><span/></a><a name="__RefHeading__2331_1167907073"/>pstatserver</h3><h3 class="P69"><a id="a__ptloader"><span/></a><a name="__RefHeading__2333_1167907073"/>ptloader</h3><h3 class="P69"><a id="a__scripts"><span/></a><a name="__RefHeading__2335_1167907073"/>scripts</h3><h3 class="P69"><a id="a__softegg"><span/></a><a name="__RefHeading__2337_1167907073"/>softegg</h3><h3 class="P69"><a id="a__softprogs"><span/></a><a name="__RefHeading__2339_1167907073"/>softprogs</h3><h3 class="P69"><a id="a__text-stats"><span/></a><a name="__RefHeading__2341_1167907073"/>text-stats</h3><h3 class="P69"><a id="a__vrml"><span/></a><a name="__RefHeading__2343_1167907073"/>vrml</h3><h3 class="P69"><a id="a__vrmlegg"><span/></a><a name="__RefHeading__2345_1167907073"/>vrmlegg</h3><h3 class="P69"><a id="a__vrmlprogs"><span/></a><a name="__RefHeading__2347_1167907073"/>vrmlprogs</h3><h3 class="P69"><a id="a__win-stats"><span/></a><a name="__RefHeading__2349_1167907073"/>win-stats</h3><h3 class="P69"><a id="a__xfile"><span/></a><a name="__RefHeading__2351_1167907073"/>xfile</h3><h3 class="P69"><a id="a__xfileegg"><span/></a><a name="__RefHeading__2353_1167907073"/>xfileegg</h3><h3 class="P69"><a id="a__xfileprogs"><span/></a><a name="__RefHeading__2355_1167907073"/>xfileprogs</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2357_1167907073"/><span class="T26">p</span>premake</p><p class="P38">Panda3D building system.</p><p class="P45"> </p><p class="P42"> </p><p class="Title"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2359_1167907073"/><span class="T27">s</span>amples</p><p class="P39">Contains samples to demonstrate how Panda3D works.</p><h3 class="P69"><a id="a__Asteroids"><span/></a><a name="__RefHeading__2013_1167907073"/>Asteroids</h3><h3 class="P69"><a id="a__Ball-in-Maze"><span/></a><a name="__RefHeading__2361_1167907073"/>Ball-in-Maze</h3><h3 class="P69"><a id="a__Boxing-Robots"><span/></a><a name="__RefHeading__2363_1167907073"/>Boxing-Robots</h3><h3 class="P69"><a id="a__Bump-Mapping"><span/></a><a name="__RefHeading__2365_1167907073"/>Bump-Mapping</h3><h3 class="P69"><a id="a__Carousel"><span/></a><a name="__RefHeading__2367_1167907073"/>Carousel</h3><h3 class="P69"><a id="a__Cartoon-Shader"><span/></a><a name="__RefHeading__2369_1167907073"/>Cartoon-Shader</h3><h3 class="P69"><a id="a__Chessboard"><span/></a><a name="__RefHeading__2371_1167907073"/>Chessboard</h3><h3 class="P69"><a id="a__Disco-Lights"><span/></a><a name="__RefHeading__2373_1167907073"/>Disco-Lights</h3><h3 class="P69"><a id="a__Distortion"><span/></a><a name="__RefHeading__2375_1167907073"/>Distortion</h3><h3 class="P69"><a id="a__Fireflies"><span/></a><a name="__RefHeading__2377_1167907073"/>Fireflies</h3><h3 class="P69"><a id="a__Fractal-Plants"><span/></a><a name="__RefHeading__2379_1167907073"/>Fractal-Plants</h3><h3 class="P69"><a id="a__Glow-Filter"><span/></a><a name="__RefHeading__2381_1167907073"/>Glow-Filter</h3><h3 class="P69"><a id="a__Infinite-Tunnel"><span/></a><a name="__RefHeading__2383_1167907073"/>Infinite-Tunnel</h3><h3 class="P69"><a id="a__Looking-and-Gripping"><span/></a><a name="__RefHeading__2385_1167907073"/>Looking-and-Gripping</h3><h3 class="P69"><a id="a__Media-Player"><span/></a><a name="__RefHeading__2387_1167907073"/>Media-Player</h3><h3 class="P69"><a id="a__Motion-Trails"><span/></a><a name="__RefHeading__2389_1167907073"/>Motion-Trails</h3><h3 class="P69"><a id="a__Music-Box"><span/></a><a name="__RefHeading__2391_1167907073"/>Music-Box</h3><h3 class="P69"><a id="a__Particles"><span/></a><a name="__RefHeading__2393_1167907073"/>Particles</h3><h3 class="P69"><a id="a__Procedural-Cube"><span/></a><a name="__RefHeading__2395_1167907073"/>Procedural-Cube</h3><h3 class="P69"><a id="a__Roaming-Ralph"><span/></a><a name="__RefHeading__2397_1167907073"/>Roaming-Ralph</h3><h3 class="P69"><a id="a__Shadows"><span/></a><a name="__RefHeading__2399_1167907073"/>Shadows</h3><h3 class="P69"><a id="a__Solar-System"><span/></a><a name="__RefHeading__2401_1167907073"/>Solar-System</h3><h3 class="P69"><a id="a__Teapot-on-TV"><span/></a><a name="__RefHeading__2403_1167907073"/>Teapot-on-TV</h3><h3 class="P69"><a id="a__Texture-Swapping"><span/></a><a name="__RefHeading__2405_1167907073"/>Texture-Swapping</h3><p class="P42"> </p><p class="Title"> </p><p class="Title"><a name="__RefHeading__2407_1167907073"/><span class="T27">t</span>hirdparty</p><p class="P39">Third party libraries/Software Development Kits (SDKs).</p><p class="P39">These are operating system-specific installations of third party software. </p><p class="P39">Includes Python, Bison, Flex, nsis, artoolkit , bullet, eigen ,extras ,fcollada,</p><p class="P39">ffmpeg,fmodex,freetype,jpeg,npapi,nvidiacg,ode,openal</p><p class="P39">openssl,ovr,png,rocket,squish,tiff,vorbis,vrpn and zlib.</p><h2 class="P62"><a id="a__Pmw"><span/></a><a name="__RefHeading__2409_1167907073"/>Pmw</h2><h2 class="P62"><a id="a__win-extras"><span/></a><a name="__RefHeading__2411_1167907073"/>win-extras</h2><h3 class="P69"><a id="a__JOD"><span/></a><a name="__RefHeading__2413_1167907073"/>JOD</h3><h3 class="P69"><a id="a__phidgets"><span/></a><a name="__RefHeading__2415_1167907073"/>phidgets</h3><h3 class="P69"><a id="a__serial"><span/></a><a name="__RefHeading__2417_1167907073"/>serial</h3><h3 class="P69"><a id="a__smartroom"><span/></a><a name="__RefHeading__2419_1167907073"/>smartroom</h3><h2 class="P62"><a id="a__win-libs-vc10-x64"><span/></a><a name="__RefHeading__2421_1167907073"/>win-libs-vc10-x64</h2><h3 class="P69"><a id="a__artoolkit"><span/></a><a name="__RefHeading__2423_1167907073"/>artoolkit</h3><h3 class="P69"><a id="a__bullet"><span/></a><a name="__RefHeading__2425_1167907073"/>bullet</h3><h3 class="P69"><a id="a__eigen"><span/></a><a name="__RefHeading__2427_1167907073"/>eigen</h3><h3 class="P69"><a id="a__extras"><span/></a><a name="__RefHeading__2429_1167907073"/>extras</h3><h3 class="P69"><a id="a__fcollada"><span/></a><a name="__RefHeading__2431_1167907073"/>fcollada</h3><h3 class="P69"><a id="a__ffmpeg"><span/></a><a name="__RefHeading__2433_1167907073"/>ffmpeg</h3><h3 class="P69"><a id="a__fmodex"><span/></a><a name="__RefHeading__2435_1167907073"/>fmodex</h3><h3 class="P69"><a id="a__freetype"><span/></a><a name="__RefHeading__2437_1167907073"/>freetype</h3><h3 class="P69"><a id="a__jpeg"><span/></a><a name="__RefHeading__2439_1167907073"/>jpeg</h3><h3 class="P69"><a id="a__npapi"><span/></a><a name="__RefHeading__2441_1167907073"/>npapi</h3><h3 class="P69"><a id="a__nvidiacg"><span/></a><a name="__RefHeading__2443_1167907073"/>nvidiacg</h3><h3 class="P69"><a id="a__ode"><span/></a><a name="__RefHeading__2445_1167907073"/>ode</h3><h3 class="P69"><a id="a__openal"><span/></a><a name="__RefHeading__2447_1167907073"/>openal</h3><h3 class="P69"><a id="a__openssl"><span/></a><a name="__RefHeading__2449_1167907073"/>openssl</h3><h3 class="P69"><a id="a__ovr"><span/></a><a name="__RefHeading__2451_1167907073"/>ovr</h3><h3 class="P69"><a id="a__png"><span/></a><a name="__RefHeading__2453_1167907073"/>png</h3><h3 class="P69"><a id="a__rocket"><span/></a><a name="__RefHeading__2455_1167907073"/>rocket</h3><h3 class="P69"><a id="a__squish"><span/></a><a name="__RefHeading__2457_1167907073"/>squish</h3><h3 class="P69"><a id="a__tiff"><span/></a><a name="__RefHeading__2459_1167907073"/>tiff</h3><h3 class="P69"><a id="a__vorbis"><span/></a><a name="__RefHeading__2461_1167907073"/>vorbis</h3><h3 class="P69"><a id="a__vrpn"><span/></a><a name="__RefHeading__2463_1167907073"/>vrpn</h3><h3 class="P69"><a id="a__zlib"><span/></a><a name="__RefHeading__2465_1167907073"/>zlib</h3><h2 class="P62"><a id="a__win-nsis"><span/></a><a name="__RefHeading__2467_1167907073"/>win-nsis</h2><h2 class="P62"><a id="a__win-python-x64"><span/></a><a name="__RefHeading__2469_1167907073"/>win-python-x64</h2><h2 class="P62"><a id="a__win-util"><span/></a><a name="__RefHeading__2471_1167907073"/>win-util</h2><p class="P42"><a name="__RefHeading__3467_1309189275"/>Part 2</p><h2 class="P62"><a id="a__The_Graphics_Engine"><span/></a><a name="__RefHeading__3589_869075401"/>The Graphics Engine</h2><p class="Text_20_body">The GraphicsEngine is where it all begins. There is only one, global, GraphicsEngine in an application, and its job is to keep all of the pointers to your open windows and buffers, and also to manage the task of doing the rendering, for all of the open windows and buffers. Panda normally creates a GraphicsEngine for you at startup, which is available as <span class="Source_20_Text"><span class="T10">base.graphicsEngine</span></span>. There is usually no reason to create a second GraphicsEngine. </p><p class="P53"> </p><p class="P53">Note also that the following interfaces are strictly for the advanced user. Normally, if you want </p><p class="P53">to create a new window or an offscreen buffer for rendering, you would just use the </p><p class="P53"> </p><p class="_5f_code"><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">openWindow</span><span class="_5f_OOoComputerBase">()</span></p><p class="P53">or </p><p class="_5f_code"><span class="_5f_OOoComputerIdent">window</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeTextureBuffer</span><span class="_5f_OOoComputerBase">()</span></p><p class="P53"><span class="_5f_OOoComputerBase"/></p><p class="P53">interfaces, which handle all of the details for you automatically. </p><p class="P53">However, please continue reading if you want to understand in detail how Panda manages </p><p class="P53">windows and buffers, or if you have special needs that are not addressed by the above </p><p class="P53">convenience methods. </p><p class="P25"> </p><h3 class="Heading_20_3"><a id="a__GraphicsPipe"><span/></a><a name="__RefHeading__4096_869075401"/><a name="GraphicsPipe"/>GraphicsPipe</h3><p class="Text_20_body">Each application will also need at least one GraphicsPipe. The GraphicsPipe encapsulates the particular API used to do rendering. For instance, there is one GraphicsPipe class for OpenGL rendering, and a different GraphicsPipe for DirectX. Although it is possible to create a GraphicsPipe of a specific type directly, normally Panda will create a default GraphicsPipe for you at startup, which is available in <span class="Source_20_Text">base.pipe</span>. </p><p class="Text_20_body">The GraphicsPipe object isn't often used directly, except to create the individual GraphicsWindow and GraphicsBuffer objects. </p><h3 class="Heading_20_3"><a id="a__GraphicsWindow_and_GraphicsBuffer"><span/></a><a name="__RefHeading__4098_869075401"/><a name="GraphicsWindow_and_GraphicsBuffer"/>GraphicsWindow and GraphicsBuffer</h3><p class="Text_20_body">The GraphicsWindow class is the class that represents a single onscreen window for rendering. Panda normally opens a default window for you at startup, which is available in <span class="Source_20_Text">base.win</span>. You can create as many additional windows as you like. (Note, however, that some graphics drivers incur a performance penalty when multiple windows are open simultaneously.) </p><p class="Text_20_body">Similarly, GraphicsBuffer is the class that represents a hidden, offscreen buffer for rendering special offscreen effects, such as render-to-texture. It is common for an application to have many offscreen buffers open at once. </p><p class="Text_20_body">Both classes inherit from the base class GraphicsOutput, which contains all of the code common to rendering to a window or offscreen buffer. </p><h3 class="P68"><a id="a__GraphicsStateGuardian"><span/></a><a name="__RefHeading__4100_869075401"/><a name="GraphicsStateGuardian"/>GraphicsStateGuardian</h3><p class="Text_20_body">The GraphicsStateGuardian, or GSG for short, represents the actual graphics context. This class manages the actual nuts-and-bolts of drawing to a window; it manages the loading of textures and vertex buffers into graphics memory, and has the functions for actually drawing triangles to the screen. (During the process of rendering the frame, the "graphics state" changes several times; the GSG gets its name from the fact that most of its time is spent managing this graphics state.) </p><p class="Text_20_body">You would normally never call any methods on the GSG directly; Panda handles all of this for you, via the GraphicsEngine. This is important, because in some modes, the GSG may operate almost entirely in a separate thread from all of your application code, and it is important not to interrupt that thread while it might be in the middle of drawing. </p><p class="Text_20_body">Each GraphicsOutput object keeps a pointer to the GSG that will be used to render that window or buffer. It is possible for each GraphicsOutput to have its own GSG, or it is possible to share the same GSG between multiple different GraphicsOutputs. Normally, it is preferable to share GSG's, because this tends to be more efficient for managing graphics resources. </p><p class="Text_20_body">Consider the following diagram to illustrate the relationship between these classes. This shows a typical application with one window and two offscreen buffers: </p><table border="0" cellspacing="0" cellpadding="0" class="Table1"><colgroup><col width="393"/></colgroup><tr><td style="text-align:left;width:8.989cm; " class="Table1_A1"><p class="Table_20_Contents">GraphicsEngine </p><table border="0" cellspacing="0" cellpadding="0" class="Table2"><colgroup><col width="127"/><col width="126"/><col width="129"/></colgroup><tr><td style="text-align:left;width:2.902cm; " class="Table2_A1"><p class="Table_20_Contents"> </p></td><td style="text-align:left;width:2.875cm; " class="Table2_B1"><p class="Table_20_Contents">GraphicsPipe</p></td><td style="text-align:left;width:2.955cm; " class="Table2_A1"><p class="Table_20_Contents"> </p></td></tr><tr><td style="text-align:left;width:2.902cm; " class="Table2_A1"><p class="Table_20_Contents">↙</p></td><td style="text-align:left;width:2.875cm; " class="Table2_A1"><p class="Table_20_Contents">↓</p></td><td style="text-align:left;width:2.955cm; " class="Table2_A1"><p class="Table_20_Contents">↘</p></td></tr><tr><td style="text-align:left;width:2.902cm; " class="Table2_B1"><p class="Table_20_Contents">GraphicsOutput<br/>(window)</p></td><td style="text-align:left;width:2.875cm; " class="Table2_B1"><p class="Table_20_Contents">GraphicsOutput<br/>(buffer)</p></td><td style="text-align:left;width:2.955cm; " class="Table2_B1"><p class="Table_20_Contents">GraphicsOutput<br/>(buffer)</p></td></tr><tr><td style="text-align:left;width:2.902cm; " class="Table2_A1"><p class="Table_20_Contents">┊</p></td><td style="text-align:left;width:2.875cm; " class="Table2_A1"><p class="Table_20_Contents">┊</p></td><td style="text-align:left;width:2.955cm; " class="Table2_A1"><p class="Table_20_Contents">┊</p></td></tr><tr><td style="text-align:left;width:2.902cm; " class="Table2_B1"><p class="Table_20_Contents">GSG</p></td><td style="text-align:left;width:2.875cm; " class="Table2_B1"><p class="Table_20_Contents">GSG</p></td><td style="text-align:left;width:2.955cm; " class="Table2_B1"><p class="Table_20_Contents">GSG</p></td></tr></table></td></tr></table><p class="Text_20_body">The GraphicsPipe was used to create each of the three GraphicsOutputs, of which one is a GraphicsWindow, and the remaining two are GraphicsBuffers. Each GraphicsOutput has a pointer to the GSG that will be used for rendering. Finally, the GraphicsEngine is responsible for managing all of these objects. </p><p class="Text_20_body">In the above illustration, each window and buffer has its own GSG, which is legal, although it's usually better to share the same GSG across all open windows and buffers. </p><p class="Text_20_body"> </p><h3 class="Heading_20_3"><a id="a__Rendering_a_frame"><span/></a><a name="__RefHeading__3853_869075401"/>Rendering a frame</h3><p class="Text_20_body">There is one key interface to rendering each frame of the graphics simulation:</p><p class="_5f_code"><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">renderFrame</span><span class="_5f_OOoComputerBase">()</span></p><p class="P53">This method causes all open GraphicsWindows and GraphicsBuffers to render their contents for</p><p class="P53">the current frame. In order for Panda3D to render anything, this method must be called once per frame. Normally, this is done automatically by the task "igloop", which is created when you start</p><p class="P54">Panda. </p><p class="P54"> </p><h3 class="P68"><a id="a__Using_a_GraphicsEngine_to_create_windows_and_buffers"><span/></a><a name="__RefHeading__3855_869075401"/>Using a GraphicsEngine to create windows and buffers</h3><p class="P53"> </p><p class="P53">In order to render in Panda3D, you need a GraphicsStateGuardian , and either a GraphicsWindow</p><p class="P53">(for rendering into a window) or a GraphicsBuffer (for rendering offscreen). You cannot create or destroy these objects directly; instead, you must use interfaces on the GraphicsEngine to create them. Before you can create either of the above, you need to have a GraphicsPipe, which specifies</p><p class="P53">the particular graphics API you want to use (e.g. OpenGL or DirectX). The default GraphicsPipe</p><p class="P53">specified in your Config.prc file has already been created at startup, and can be accessed by</p><p class="P53">base.pipe.</p><p class="P53"> </p><p class="P53"> </p><p class="P53">Now that you have a GraphicsPipe and a GraphicsEngine, you can create a</p><p class="P53">GraphicsStateGuardian object. This object corresponds to a single graphics context on the</p><p class="P53">graphics API, e.g. a single OpenGL context. (The context owns all of the OpenGL or DirectX</p><p class="P53">objects like display lists, vertex buffers, and texture objects.) You need to have at least one</p><p class="P53">GraphicsStateGuardian before you can create a GraphicsWindow:</p><p class="P53"> </p><p class="P53"><span class="_5f_OOoComputerIdent">myGsg</span><span class="_5f_OOoComputerBase">=</span><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeGsg</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">pipe</span><span class="_5f_OOoComputerBase">)</span></p><p class="P53"> </p><p class="P53">Now that you have a GraphicsStateGuardian, you can use it to create an onscreen</p><p class="P53">GraphicsWindow or an offscreen GraphicsBuffer:</p><p class="P53"> </p><p class="_5f_code_borderStart">base.graphicsEngine.makeWindow(gsg, name, sort)</p><p class="_5f_code_borderEnd">base.graphicsEngine.makeBuffer(gsg, name, sort, xSize, ySize, wantTexture)</p><p class="P53"> </p><p class="P53">gsg is the GraphicsStateGuardian, name Is an arbitrary name you want to assign to the window/</p><p class="P53">buffer, and sort is an integer that determines the order in which the windows/buffers will be</p><p class="P53">rendered. The buffer specific arguments xSize and ySize decide the dimensions of the buffer, and</p><p class="P53">wantTexture should be set to True if you want to retrieve a texture from this buffer later on.</p><p class="P54">You can also use</p><p class="P54"> </p><p class="_5f_code"><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeParasite</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">host</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerIdent">name</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerIdent">sort</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerIdent">xSize</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerIdent">ySize</span><span class="_5f_OOoComputerBase">)</span></p><p class="P53"> </p><p class="P53">where host is a GraphicsOutput object. It creates a buffer but it does not allocate room for itself. Instead it renders to the framebuffer of host. It effectively has wantTexture set to True so you can</p><p class="P53">retrieve a texture from it later on. See The GraphicsOutput class and Graphics Buffers and Windows</p><p class="P53">for more information.</p><p class="P53"> </p><p class="_5f_code_borderStart"><span class="_5f_OOoComputerIdent">myWindow</span><span class="_5f_OOoComputerBase">=</span><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeWindow</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">myGsg</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">"Hello World"</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">0</span><span class="_5f_OOoComputerBase">)</span></p><p class="_5f_code"><span class="_5f_OOoComputerIdent">myBuffer</span><span class="_5f_OOoComputerBase">=</span><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeBuffer</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">myGsg</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">"Hi World"</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">0</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">800</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerLiteral">600</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerIdent">True</span><span class="_5f_OOoComputerBase">)</span></p><p class="_5f_code_borderEnd"><span class="_5f_OOoComputerIdent">myParasite</span><span class="_5f_OOoComputerBase">=</span><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">makeBuffer</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">myBuffer</span><span class="_5f_OOoComputerBase">,</span><span class="_5f_OOoComputerLiteral">"Im a leech"</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">0</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">800</span><span class="_5f_OOoComputerBase">,</span> <span class="_5f_OOoComputerLiteral">600</span><span class="_5f_OOoComputerBase">)</span></p><p class="P53"> </p><p class="P56">Note: if you want the buffers to be visible add show-buffers true to your configuration file.</p><p class="P53">This causes the buffers to be opened as windows instead, which is useful while debugging.</p><p class="P53"> </p><h3 class="Heading_20_3"><a id="a__Sharing_graphics_contexts"><span/></a><a name="__RefHeading__3857_869075401"/>Sharing graphics contexts</h3><p class="P53"> </p><p class="P53">It is possible to share the same GraphicsStateGuardian among multiple different</p><p class="P53">GraphicsWindows and/or GraphicsBuffers; if you do this, then the graphics context will be used</p><p class="P53">to render into each window one at a time. This is particularly useful if the different windows</p><p class="P53">will be rendering many of the same objects, since then the same texture objects and vertex</p><p class="P53">buffers can be shared between different windows.</p><p class="P53">It is also possible to use a different GraphicsStateGuardian for each different window. This</p><p class="P53">means that if a particular texture is to be rendered in each window, it will have to be loaded</p><p class="P53">into graphics memory twice, once in each context, which may be wasteful. However, there are</p><p class="P53">times when this may be what you want to do, for instance if you have multiple graphics cards</p><p class="P53">and you want to to render to both of them simultaneously. (Note that the actual support for</p><p class="P53">simultaneously rendering to multiple graphics cards is currently unfinished in Panda at the</p><p class="P53">time of this writing, but the API has been designed with this future path in mind.)</p><p class="P53"> </p><h3 class="Heading_20_3"><a id="a__Closing_windows"><span/></a><a name="__RefHeading__3859_869075401"/>Closing windows</h3><p class="Text_20_body"> </p><p class="P53">To close a specific window or buffer you use removeWindow(window). To close all windows</p><p class="P53"> </p><p class="_5f_code_borderStart"><span class="_5f_OOoComputerIdent">removeAllWindows</span><span class="_5f_OOoComputerBase">()</span></p><p class="_5f_code"><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">removeWindow</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerIdent">myWindow</span><span class="_5f_OOoComputerBase">)</span></p><p class="_5f_code_borderEnd"><span class="_5f_OOoComputerIdent">base</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">graphicsEngine</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">removeAllWindows</span><span class="_5f_OOoComputerBase">()</span></p><p class="P53"> </p><p class="P53">More about GraphicsEngine</p><p class="P53"> </p><p class="P53">Here is some other useful functionality of the GraphicsEngine class.</p><p class="P53">GetNumWindows() Returns the number of windows and buffers that this GraphicsEngine</p><p class="P53">object is managing. IsEmpty() Returns True if this GraphicsEngine is not managing any windows or buffers. See API for advanced functionality of GraphicsEngine and GraphicsStateGuardian class.</p><h2 class="P63"><a id="a__ppython"><span/></a><a name="__RefHeading__3861_869075401"/>ppython</h2><p class="P55">ppython.exe is used for starting Panda3D. Basicly it is only duplicated copy of python.exe renamed so you don't mix Panda's python with other python on your PATH</p><h2 class="P62"><a id="a__Panda_Audio_Documenation"><span/></a><a name="__RefHeading__4102_869075401"/>Panda Audio Documenation</h2><h3 class="Heading_20_3"><a id="a__AudioManager_and_AudioSound"><span/></a><a name="__RefHeading__4104_869075401"/>AudioManager and AudioSound</h3><p class="P53"> </p><p class="P53">The AudioManager is a combination of a file cache and a category</p><p class="P53">of sounds (e.g. sound effects, battle sounds, or music).</p><p class="P53"> </p><p class="P53">The first step is to decide which AudioManager to use and load it.</p><p class="P53"> </p><p class="P53">Once you have an AudioManager (e.g. effectsManager), a call to </p><p class="P53">get_sound(&lt;file&gt;) on that manager should get you an AudioSound</p><p class="P53">(e.g. mySound = effectsManager.getSound("bang")).</p><p class="P53"> </p><p class="P53">After getting a sound from an AudioManager, you can tell the sound </p><p class="P53">change its volume, loop, start time, play, stop, etc.  There is no </p><p class="P53">need to involve the AudioManager explicitly in these operations.</p><p class="P53"> </p><p class="P53">Simply delete the sound when you're done with it.  (The AudioSound </p><p class="P53">knows which AudioManager it is associated with, and will do the right</p><p class="P53">thing).</p><p class="P53"> </p><p class="P53">The audio system, provides an API for the rest of Panda; and leaves a </p><p class="P53">lot of leaway to the low level sound system.  This is good and bad.  </p><p class="P53">On the good side: it's easier to understand, and it allows for widely</p><p class="P53">varrying low level systems.  On the bad side: it may be harder to keep</p><p class="P53">the behavior consistent accross implementations (please try to keep </p><p class="P53">them consistent, when adding an implementation).</p><p class="P53"> </p><h3 class="Heading_20_3"><a id="a__Example_Usage"><span/></a><a name="__RefHeading__4106_869075401"/>Example Usage</h3><p class="Contents_20_1"><a name="__RefHeading__4108_869075401"/>Python Example:</p><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">effects</span> <span class="_5f_OOoComputerBase">=</span> <span class="_5f_OOoComputerIdent">AudioManager</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">createAudioManager</span><span class="_5f_OOoComputerBase">()</span></span></p><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">music</span> <span class="_5f_OOoComputerBase">=</span> <span class="_5f_OOoComputerIdent">AudioManager</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">createAudioManager</span><span class="_5f_OOoComputerBase">()</span></span></p><p class="_5f_code"/><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">bang</span> <span class="_5f_OOoComputerBase">=</span> <span class="_5f_OOoComputerIdent">effects</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">load</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerLiteral">"bang"</span><span class="_5f_OOoComputerBase">)</span></span></p><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">background</span> <span class="_5f_OOoComputerBase">=</span> <span class="_5f_OOoComputerIdent">music</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">load</span><span class="_5f_OOoComputerBase">(</span><span class="_5f_OOoComputerLiteral">"background_music"</span><span class="_5f_OOoComputerBase">)</span></span></p><p class="_5f_code"/><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">background</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">play</span><span class="_5f_OOoComputerBase">()</span></span></p><p class="_5f_code"><span> <span class="_5f_OOoComputerIdent">bang</span><span class="_5f_OOoComputerBase">.</span><span class="_5f_OOoComputerIdent">play</span><span class="_5f_OOoComputerBase">()</span></span></p><p class="Text_20_body"> </p><p class="P45"> </p><p class="Contents_20_1"><a name="__RefHeading__4110_869075401"/>C++ Example:</p><p class="P26"><span> <span class="_5f_OOoComputerIdent">AudioManager</span> <span class="_5f_OOoComputerIdent">effects</span> <span class="_5f_OOoComputerKeyWord">=</span> <span class="_5f_OOoComputerIdent">AudioManager</span><span class="_5f_OOoComputerKeyWord">::</span><span class="_5f_OOoComputerIdent">create_AudioManager</span><span class="_5f_OOoComputerKeyWord">();</span></span></p><p class="P26"><span> <span class="_5f_OOoComputerIdent">AudioManager</span> <span class="_5f_OOoComputerIdent">music</span> <span class="_5f_OOoComputerKeyWord">=</span> <span class="_5f_OOoComputerIdent">AudioManager</span><span class="_5f_OOoComputerKeyWord">::</span><span class="_5f_OOoComputerIdent">create_AudioManager</span><span class="_5f_OOoComputerKeyWord">();</span></span></p><p class="P26"> </p><p class="P26"><span> <span class="_5f_OOoComputerIdent">bang</span> <span class="_5f_OOoComputerKeyWord">=</span> <span class="_5f_OOoComputerIdent">effects</span><span class="_5f_OOoComputerKeyWord">.</span><span class="_5f_OOoComputerIdent">get_sound</span><span class="_5f_OOoComputerKeyWord">(</span><span class="_5f_OOoComputerLiteral">"bang"</span><span class="_5f_OOoComputerKeyWord">);</span></span></p><p class="P26"><span> <span class="_5f_OOoComputerIdent">background</span> <span class="_5f_OOoComputerKeyWord">=</span> <span class="_5f_OOoComputerIdent">music</span><span class="_5f_OOoComputerKeyWord">.</span><span class="_5f_OOoComputerIdent">get_sound</span><span class="_5f_OOoComputerKeyWord">(</span><span class="_5f_OOoComputerLiteral">"background_music"</span><span class="_5f_OOoComputerKeyWord">);</span></span></p><p class="P26"> </p><p class="P26"><span> <span class="_5f_OOoComputerIdent">background</span><span class="_5f_OOoComputerKeyWord">.</span><span class="_5f_OOoComputerIdent">play</span><span class="_5f_OOoComputerKeyWord">();</span></span></p><p class="P26"><span> <span class="_5f_OOoComputerIdent">bang</span><span class="_5f_OOoComputerKeyWord">.</span><span class="_5f_OOoComputerIdent">play</span><span class="_5f_OOoComputerKeyWord">();</span></span></p><h2 class="P62"><a id="a__Coding_style"><span/></a><a name="__RefHeading__4112_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T11">Coding style</span></span></h2><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Almost any programming language gives a considerable amount of freedom</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">to the programmer in style conventions.  Most programmers eventually</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">develop a personal style and use it as they develop code.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">When multiple programmers are working together on one project, this</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">can lead to multiple competing styles appearing throughout the code.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">This is not the end of the world, but it does tend to make the code</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">more difficult to read and maintain if common style conventions are</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">not followed throughout.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">It is much better if all programmers can agree to use the same style</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">when working together on the same body of work.  It makes reading,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">understanding, and extending the existing code much easier and faster</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">for everyone involved.  This is akin to all of the animators on a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">feature film training themselves to draw in one consistent style</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">throughout the film.</span></span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Often, there is no strong reason to prefer one style over another,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">except that at the end of the day just one must be chosen.</span></span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">The following lays out the conventions that we have agreed to use</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">within Panda.  Most of these conventions originated from an</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">amalgamation of the different styles of the first three programmers to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">do major development in Panda.  The decisions were often arbitrary,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">and some may object to the particular choices that were made.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Although discussions about the ideal style for future work are still</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">welcome, considerable code has already been written using these</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">existing conventions, and the most important goal of this effort is</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">consistency.  Thus, changing the style at this point would require</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">changing all of the existing code as well.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Note that not all existing Panda code follows these conventions.  This</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">is unfortunate, but it in no way constitutes an argument in favor of</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">abandoning the conventions.  Rather, it means we should make an effort</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">to bring the older code into compliance as we have the opportunity.</span></span></p><p class="P27"> </p><p class="P48"> </p><p class="P29"><span class="_5f_OOoComputerKeyWord"><span class="T12">Naturally, these conventions only apply to C and C++ code; a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">completely different set of conventions has been established for</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Python code for the project, and those conventions will not be</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">discussed here.</span></span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">SPACING:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">No tab characters should ever appear in a C++ file; we use only space</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">characters to achieve the appropriate indentation.  Most editors can</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">be configured to use spaces instead of tabs.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">We use two-character indentation.  That is, each nested level of</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">indentation is two characters further to the right than the enclosing</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">level.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Spaces should generally surround operators, e.g. i + 1 instead of i+1.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Spaces follow commas in a parameter list, and semicolons in a for</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">statement.  Spaces are not placed immediately within parentheses;</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">e.g. foo(a, b) rather than foo( a,b ).</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Resist writing lines of code that extend beyond 80 columns; instead,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">fold a long line when possible.  Occasionally a line cannot be easily</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">folded and remain readable, so this should be taken as more of a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">suggestion than a fixed rule, but most lines can easily be made to fit</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">within 80 columns.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Comments should never extend beyond 80 columns, especially sentence or</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">paragraph comments that appear on a line or lines by themselves.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">These should generally be wordwrapped within 72 columns.  Any smart</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">editor can do this easily.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">CURLY BRACES:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">In general, the opening curly brace for a block of text trails the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">line that introduces it, and the matching curly brace is on a line by</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">itself, lined up with the start of the introducing line, e.g.:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">for</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">(int</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerIdent">i</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">=</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerLiteral">0</span><span class="_5f_OOoComputerKeyWord">;</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerIdent">i</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">&lt;</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerLiteral">10</span><span class="_5f_OOoComputerKeyWord">;</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerIdent">i</span><span class="_5f_OOoComputerKeyWord">++)</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">{</span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">    </span></span><span class="_5f_OOoComputerKeyWord">...</span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">}</span></p><p class="P45"><span class="_5f_OOoComputerKeyWord"/></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Commands like if, while, and for should always use curly braces, even</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">if they only enclose one command.  That is, do this:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">if</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">(</span><span class="_5f_OOoComputerIdent">foo</span><span class="_5f_OOoComputerKeyWord">)</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">{</span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">    </span></span><span class="_5f_OOoComputerIdent">bar</span><span class="_5f_OOoComputerKeyWord">();</span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">}</span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">instead of this:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">if</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">(</span><span class="_5f_OOoComputerIdent">foo</span><span class="_5f_OOoComputerKeyWord">)</span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">    </span></span><span class="_5f_OOoComputerIdent">bar</span><span class="_5f_OOoComputerKeyWord">();</span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">NAMING:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Class names are mixed case with an initial capital, e.g. MyNewClass.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Each different class (except nested classes, of course) is defined in</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">its own header file named the same as the class itself, but with the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">first letter lowercase, e.g. myNewClass.h.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Typedef names and other type names follow the same convention as class</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">names: mixed case with an initial capital.  These need not be defined</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">in their own header file, but usually typedef names will be scoped</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">within some enclosing class.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Local variable names are lowercase with an underscore delimiting</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">words: my_value.  Class data members, including static data members,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">are the same, but with a leading underscore: _my_data_member.  We do</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">not use Hungarian notation.</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Class method names, as well as standalone function names, are</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">lowercase with a delimiting underscore, just like local variable</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">names: my_function().</span></span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">LANGUAGE CONSTRUCTS:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Prefer C++ constructs over equivalent C constructs when writing C++</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">code.  For instance, use:</span></span></p><p class="P45"><span class="_5f_OOoComputerKeyWord"><span class="T12"/></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">static</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">const</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">int</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerIdent">buffer_size</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerKeyWord">=</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerLiteral">1024</span><span class="_5f_OOoComputerKeyWord">;</span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">instead of:</span></span></p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">  </span></span><span class="_5f_OOoComputerKeyWord">#define</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerIdent">BUFFER_SIZE</span><span class="_5f_OOoComputerKeyWord"><span class="T12"> </span></span><span class="_5f_OOoComputerLiteral">1024</span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">Resist using brand-new C++ features that are not broadly supported by</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">compilers.  One of our goals in Panda is ease of distribution to a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">wide range of platforms; this goal is thwarted if only a few compilers</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">may be used.</span></span></p><p class="P27"> </p><p class="P27"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">More examples of the agreed coding style may be found in</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T12">panda/src/doc/sampleClass.*  </span></span><span class="_5f_OOoComputerKeyWord"><span class="T16">file should be also in appendix of this manual</span></span><span class="_5f_OOoComputerKeyWord"><span class="T12">.</span></span></p><h2 class="P62"><a id="a__COLLISION_FLAGS"><span/></a><a name="__RefHeading__7656_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T13">COLLISION FLAGS</span></span></h2><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">floor: for things that avatars can stand on</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">barrier: for things that avatars should collide against that are not floors</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">camera-collide: for things that the camera should avoid</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">trigger: for things (usually not barriers or floors) that should trigger an</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">         event when avatars intersect with them</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">sphere: for things that should have a collision sphere around them</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">tube: for things that should have a collision tube (cylinder) around them</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">NOTES</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">The barrier &amp; camera-collide flags are typically used together.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">Currently, the camera automatically pulls itself in front of anything</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">marked with the camera-collide flag, so that the view of the avatar isn't</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">blocked.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">The trigger flag implies that avatars will not collide with the object;</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">they can move freely through it.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">The sphere &amp; tube flags create a collision object that is as small as</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T13">possible while completely containing the original flagged geometry.</span></span></p><h2 class="P62"><a id="a__egg_palettize"><span/></a><a name="__RefHeading__7658_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">egg palettize</span></span></h2><h3 class="Heading_20_3"><a id="a__HOW_TO_USE_EGG_PALETTIZE"><span/></a><a name="__RefHeading__7660_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">HOW TO USE EGG_PALETTIZE</span></span></h3><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">The program egg-palettize is used when building models to optimize</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">texture usage on all models before loading them into the show.  It is</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">capable of collecting together several different small texture images</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">from different models and assembling them together onto the same image</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">file, potentially reducing the total number of different texture</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">images that must be loaded and displayed at runtime from several</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">thousand to several hundred or fewer.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">It also can be used to group together related textures that will be</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">rendered at the same time (for instance, textures related to one</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">neighborhood), and if nothing else, it can resize textures at build</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">time so that they may be painted at any arbitrary resolution according</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">to the artist's convenience, and then reduced to a suitable size for</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">texture memory management (and to meet hardware requirements of having</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">dimensions that are always a power of two).</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">It is suggested that textures always be painted at high resolution and</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">reduced using egg-palettize, since this allows the show designer the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">greatest flexibility; if a decision is later made to increase the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">resolution of a texture, this may be done by changing an option with</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">egg-palettize, and does not require intervention of the artist.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">The behavior of egg-palettize is largely controlled through a source</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">file called textures.txa, which is usually found in the src/maps</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">directory within the model tree.  For a complete description of the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">syntax of the textures.txa file, invoke the command egg-palettize -H.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"> </p><h3 class="Heading_20_3"><a id="a__GROUPING_EGG_FILES"><span/></a><a name="__RefHeading__7662_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">GROUPING EGG FILES</span></span></h3><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Much of the contents of textures.txa involves assigning egg files to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">various groups; assigning two egg files to the same group indicates</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">that they are associated in some way, and their texture images may be</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">copied together into the same palettes.</span></span></p><p class="Text_20_body"> </p><p class="P45"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">The groups are arbitrary and should be defined at the beginning of the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">egg file with the syntax:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  :group groupname</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Where groupname is the name of the group.  It is also possible to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">assign a directory name to a group.  This is optional, but if done, it</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">indicates that all of the textures for this group should be installed</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">within the named subdirectory.  The syntax is:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  :group groupname dir dirname</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Where dirname is the name of the subdirectory.  If you are</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">generating a phased download, the dirname should be one of phase_1,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">phase_2, etc., corresponding to the PHASE variable in the install_egg</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">rule (see ppremake-models.txt).</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Finally, it is possible to relate the different groups to each other</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">hierachically.  Doing this allows egg-palettize to assign textures to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">the minimal common subset between egg files that share the textures.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">For instance, if group beta and group gamma both depend on group</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">alpha, a texture that is assigned to both groups beta and gamma can</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">actually be placed on group alpha, to maximize sharing and minimize</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">duplication of palette space.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">You relate two groups with the syntax:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  :group groupname with basegroupname</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Once all the groups are defined, you can assign egg files to the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">various groups with a syntax like this:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  model.egg : groupname</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">where model.egg is the name of some egg model file built within the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">tree.  You can explicitly group each egg file in this way, or you can</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">use wildcards to group several at once, e.g.:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  dog*.egg : dogs</span></span></p><p class="Text_20_body"> </p><p class="P45"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Assigning an egg file to a group assigns all of the textures used by</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">that egg file to that same group.  If no other egg files reference the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">same textures, those textures will be placed in one or more palette</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">images named after the group.  If another egg file in a different</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">group also references the textures, they will be assigned to the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">lowest group that both groups have in common (see relating the groups</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">hierarchically, above), or copied into both palette images if the two</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">groups having nothing in common.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"> </p><h3 class="Heading_20_3"><a id="a__CONTROLLING_TEXTURE_PARAMETERS"><span/></a><a name="__RefHeading__7664_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">CONTROLLING TEXTURE PARAMETERS</span></span></h3><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Most of the contents of the textures.txa is usually devoted to scaling</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">the texture images appropriately.  This is usually done with a line</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">something like this:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  texture.rgb : 64 64</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">where texture.rgb is the name of some texture image, and 64 64 is the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">size in pixels it should be scaled to.  It is also possible to specify</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">the target size as a factor of the source size, e.g.:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  bigtexture.rgb : 50%</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">specifies that the indicated texture should be scaled to 50% in each</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">dimension (for a total reduction to 0.5 * 0.5 = 25% of the original</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">area).</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">As above, you may group together multiple textures on the same line</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">using wildcards, e.g.:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  wall*.rgb : 25%</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Finally, you may include one or more optional keywords on the end of</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">the texture scaling line that indicate additional properties to apply</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">to the named textures.  See egg-palettize -H for a complete list.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Some of the more common keywords are:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  mipmap - Enables mipmaps for the texture.</span></span></p><p class="P45"><span class="_5f_OOoComputerKeyWord"><span class="T14"/></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  linear - Disables mipmaps for the texture.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  omit - Omits the texture from any palettes.  The texture will still</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    be scaled and installed, but it will not be combined with other</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    textures.  Normally you need to do this only when the texture will</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    be applied to some geometry at runtime.  (Since palettizing a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    texture requires adjusting the UV's of all the geometry that</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    references it, a texture that is applied to geometry at runtime</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">    cannot be palettized.)</span></span></p><p class="Text_20_body"> </p><h3 class="Heading_20_3"><a id="a__RUNNING_EGG-PALETTIZE"><span/></a><a name="__RefHeading__7666_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">RUNNING EGG-PALETTIZE</span></span></h3><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Normally, egg-palettize is run automatically just by typing:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make install</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">in the model tree.  It automatically reads the textures.txa file and</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">generates and installs the appropriate palette image files, as part of</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">the whole build process, and requires no further intervention from the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">user.  See ppremake-models.txt for more information on setting up the</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">model tree.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">When egg-palettize runs in the normal mode, it generates suboptimal</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">palettes.  Sometimes, for instance, a palette image is created with</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">only one small texture in the corner, and the rest of it unused.  This</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">happens because egg-palettize is reserving space for future textures,</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">and is ideal for development; but it is not suitable for shipping a</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">finished product.  When you are ready to repack all of the palettes as</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">optimally as possible, run the command:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make opt-pal</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">This causes egg-palettize to reorganize all of the palette images to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">make the best usage of texture memory.  It will force a regeneration</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">of most of the egg files in the model tree, so it can be a fairly</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">involved operation.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">It is sometimes useful to analyze the results of egg-palettize.  You</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">can type:</span></span></p><p class="P45"><span class="_5f_OOoComputerKeyWord"><span class="T14"/></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make pi &gt;pi.txt</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">to write a detailed report of every egg file, texture image, and</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">generated palette image to the file pi.txt.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">Finally, the command:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make pal-stats &gt;stats.txt</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">will write a report to stats.txt of the estimated texture memory usage</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">for all textures, broken down by group.</span></span></p><p class="Text_20_body"> </p><h3 class="Heading_20_3"><a id="a__WHEN_THINGS_GO_WRONG"><span/></a><a name="__RefHeading__7668_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T14">WHEN THINGS GO WRONG</span></span></h3><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">The whole palettizing process is fairly complex; it's necessary for</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">egg-palettize to keep a record of the complete state of all egg files</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">and all textures ever built in a particular model tree.  It generally</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">does a good job of figuring out when things change and correctly</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">regenerating the necessary egg files and textures when needed, but</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">sometimes it gets confused.</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">This is particularly likely to happen when you have reassigned some</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">egg files from one group to another, or redefined the relationship</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">between different groups.  Sometimes egg-palettize appears to run</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">correctly, but does not generate correct palettes.  Other times</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">egg-palettize will fail with an assertion failure, or even a segment</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">fault (general protection fault) when running egg-palettize, due to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">this kind of confusion.  This behavior should not happen, but it does</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">happen every once and a while.</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">When this sort of thing happens, often the best thing to do is to</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">invoke the command:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make undo-pal</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">followed by:</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">  make install</span></span></p><p class="Text_20_body"> </p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">This removes all of the old palettization information, including the</span></span></p><p class="P45"><span class="_5f_OOoComputerKeyWord"><span class="T14"/></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">state information cached from previous runs, and rebuilds a new set of</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">palettes from scratch.  It is a fairly heavy hammer, and may take some</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">time to complete, depending on the size of your model tree, but it</span></span></p><p class="Text_20_body"><span class="_5f_OOoComputerKeyWord"><span class="T14">almost always clears up any problems related to egg-palettize.</span></span></p><h2 class="P62"><a id="a__THE_PHILOSOPHY_OF_EGG_FILES"><span/></a><a name="__RefHeading__7670_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">THE PHILOSOPHY OF EGG FILES</span></span></h2><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">THE PHILOSOPHY OF EGG FILES (vs. bam files)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Egg files are used by Panda3D to describe many properties of a scene:</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">simple geometry, including special effects and collision surfaces,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">characters including skeletons, morphs, and multiple-joint</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">assignments, and character animation tables.  </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Egg files are designed to be the lingua franca of model manipulation</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">for Panda tools.  A number of utilities are provided that read and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">write egg files, for instance to convert to or from some other</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">modeling format, or to apply a transform or optimize vertices.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">egg file philosophy is to describe objects in an abstract way that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">facilitates easy manipulation; thus, the format doesn't (usually)</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">include information such as polygon connectivity or triangle meshes.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Egg files are furthermore designed to be human-readable to help a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">developer diagnose (and sometimes repair) problems.  Also, the egg</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">syntax is always intended to be backward compatible with previous</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">versions, so that as the egg syntax is extended, old egg files will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">continue to remain valid.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">This is a different philosophy than Panda's bam file format, which is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">a binary representation of a model and/or animation that is designed</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">to be loaded quickly and efficiently, and is strictly tied to a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">particular version of Panda.  The data in a bam file closely mirrors</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">the actual Panda structures that are used for rendering.  Although an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">effort is made to keep bam files backward compatible, occasionally</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">this is not possible and we must introduce a new bam file major</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">version.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Where egg files are used for model conversion and manipulation of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">models, bam files are strictly used for loading models into Panda.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Although you can load an egg file directly, a bam file will be loaded</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">much more quickly.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Egg files might be generated by outside sources, and thus it makes</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">sense to document its syntax here.  Bam files, on the other hand,</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">should only be generated by Panda3D, usually by the program egg2bam.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">The exact specification of the bam file format, if you should need it,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">is documented within the Panda3D code itself.</span></span></p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__GENERAL_EGG_SYNTAX"><span/></a><a name="__RefHeading__7672_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">GENERAL EGG SYNTAX</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Egg files consist of a series of sequential and hierarchically-nested</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">entries.  In general, the syntax of each entry is:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Entry</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">contents</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Where the name is optional (and in many cases, ignored anyway) and the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">syntax of the contents is determined by the entry-type.  The name (and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">strings in general) may be either quoted with double quotes or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">unquoted.  Newlines are treated like any other whitespace, and case is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">not significant.  The angle brackets are literally a part of the entry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">keyword.  (Square brackets and ellipses in this document are used to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">indicate optional pieces, and are not literally part of the syntax.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">The name field is always syntactically allowed between an entry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">keyword and its opening brace, even if it will be ignored.  In the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">syntax lines given below, the name is not shown if it will be ignored.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Comments may be delimited using either the C++-style // ... or the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">C-style /* ... */.  C comments do not nest.  There is also a &lt;Comment&gt;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">entry type, of the form:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Comment</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">text</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;Comment&gt; entries are slightly different, in that tools which read and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">write egg files will preserve the text within &lt;Comment&gt; entries, but</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">they may not preserve comments delimited by // or /* */.  Special</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">characters and keywords within a &lt;Comment&gt; entry should be quoted;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">it's safest to quote the entire comment.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P47"> </p><h3 class="Heading_20_3"><a id="a__LOCAL_INFORMATION_ENTRIES"><span/></a><a name="__RefHeading__7674_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">LOCAL INFORMATION ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">These nodes contain information relevant to the current level of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">nesting only.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Char</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">*&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Scalars can appear in various contexts.  They are always optional,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and specify some attribute value relevant to the current context.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The scalar name is the name of the attribute; different attribute</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  names are meaningful in different contexts.  The value is either a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  numeric or a (quoted or unquoted) string value; the interpretation</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  as a number or as a string depends on the nature of the named</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attribute.  Because of a syntactic accident with the way the egg</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  syntax evolved, &lt;Scalar&gt; and &lt;Char*&gt; are lexically the same and both</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  can represent either a string or a number.  &lt;Char*&gt; is being phased</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  out; it is suggested that new egg files use only &lt;Scalar&gt;.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__GLOBAL_INFORMATION_ENTRIES"><span/></a><a name="__RefHeading__7676_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">GLOBAL INFORMATION ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">These nodes contain information relevant to the file as a whole.  They</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">can be nested along with geometry nodes, but this nesting is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">irrelevant and the only significant placement rule is that they should</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">appear before they are referenced.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">CoordinateSystem</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">string</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This entry indicates the coordinate system used in the egg file; the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  egg loader will automatically make a conversion if necessary.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  following strings are valid: Y-up, Z-up, Y-up-right, Z-up-right,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Y-up-left, or Z-up-left.  (Y-up is the same as Y-up-right, and Z-up</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  is the same as Z-up-right.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  By convention, this entry should only appear at the beginning of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  file, although it is technically allowed anywhere.  It is an error</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  to include more than one coordinate system entry in the same file.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  If it is omitted, Y-up is assumed.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Texture</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">filename</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">scalars</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This describes a texture file that can be referenced later with</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;TRef&gt; { name }.  It is not necessary to make a &lt;Texture&gt; entry for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  each texture to be used; a texture may also be referenced directly</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  by the geometry via an abbreviated inline &lt;Texture&gt; entry, but a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  separate &lt;Texture&gt; entry is the only way to specify anything other</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  than the default texture attributes.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  If the filename is a relative path, the current egg file's directory</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  is searched first, and then the texture-path and model-path are</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  searched.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The following attributes are presently implemented for textures:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">file</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">filename</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this scalar is present, the texture file's alpha channel is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    read in from the named image file (which should contain a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    grayscale image), and the two images are combined into a single</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    two- or four-channel image internally.  This is useful for loading</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    alpha channels along with image file formats like JPEG that don't</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    traditionally support alpha channels.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">file</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">channel</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">channel</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines the channel that should be extracted from the file</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    named by alpha-file to determine the alpha channel for the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    resulting channel.  The default is 0, which means the grayscale</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    combination of r, g, b.  Otherwise, this should be the 1-based</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    channel number, for instance 1, 2, or 3 for r, g, or b,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    respectively, or 4 for the alpha channel of a four-component</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    image.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">format</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">format</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines the load format of the image file.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    format-definition is one of:</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      RGBA, RGBM, RGBA12, RGBA8, RGBA4,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      RGB, RGB12, RGB8, RGB5, RGB332,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      LUMINANCE_ALPHA,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      RED, GREEN, BLUE, ALPHA, LUMINANCE</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The formats whose names end in digits specifically request a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    particular texel width.  RGB12 and RGBA12 specify 48-bit texels</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    with or without alpha; RGB8 and RGBA8 specify 32-bit texels, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    RGB5 and RGBA4 specify 16-bit texels.  RGB332 specifies 8-bit</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texels.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The remaining formats are generic and specify only the semantic</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    meaning of the channels.  The size of the texels is determined by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the width of the components in the image file.  RGBA is the most</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    general; RGB is the same, but without any alpha channel.  RGBM is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    like RGBA, except that it requests only one bit of alpha, if the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    graphics card can provide that, to leave more room for the RGB</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    components, which is especially important for older 16-bit</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    graphics cards (the "M" stands for "mask", as in a cutout).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The number of components of the image file should match the format</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified; if it does not, the egg loader will attempt to provide</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the closest match that does.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">compression</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">compression</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Defines an explicit control over the real-time compression mode</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    applied to the texture.  The various options are:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DEFAULT OFF ON</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      FXT1 DXT1 DXT2 DXT3 DXT4 DXT5</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This controls the compression of the texture when it is loaded</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    into graphics memory, and has nothing to do with on-disk</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    compression such as JPEG.  If this option is omitted or "DEFAULT",</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    then the texture compression is controlled by the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    compressed-textures config variable.  If it is "OFF", texture</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    compression is explicitly off for this texture regardless of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    setting of the config variable; if it is "ON", texture compression</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is explicitly on, and a default compression algorithm supported by</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the driver is selected.  If any of the other options, it names the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specific compression algorithm to be used.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">wrap</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">repeat</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">wrapu</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">repeat</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">wrapv</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">repeat</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">wrapw</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">repeat</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines the behavior of the texture image outside of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    normal (u,v) range 0.0 - 1.0.  It is "REPEAT" to repeat the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture to infinity, "CLAMP" not to.  The wrapping behavior may be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified independently for each axis via "wrapu" and "wrapv", or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    it may be specified for both simultaneously via "wrap".</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Although less often used, for 3-d textures wrapw may also be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified, and it behaves similarly to wrapu and wrapv.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    There are other legal values in addtional to REPEAT and CLAMP.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The full list is:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      CLAMP</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      REPEAT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MIRROR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MIRROR_ONCE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BORDER_COLOR</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">borderr</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">red</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">borderg</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">green</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">borderb</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blue</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">bordera</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    These define the "border color" of the texture, which is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    particularly important when one of the wrap modes, above, is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    BORDER_COLOR.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">texture</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This may be one of the following attributes:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      1D</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      2D</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">      3D</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      CUBE_MAP</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The default is "2D", which specifies a normal, 2-d texture.  If</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    any of the other types is specified instead, a texture image of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the corresponding type is loaded.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If 3D or CUBE_MAP is specified, then a series of texture images</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    must be loaded to make up the complete texture; in this case, the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture filename is expected to include a sequence of one or more</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    hash mark ("#") characters, which will be filled in with the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    sequence number.  The first image in the sequence must be numbered</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    0, and there must be no gaps in the sequence.  In this case, a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    separate alpha-file designation is ignored; the alpha channel, if</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    present, must be included in the same image with the color</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    channel(s).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; multiview { flag }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this flag is nonzero, the texture is loaded as a multiview</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture.  In this case, the filename must contain a hash mark</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    ("#") as in the 3D or CUBE_MAP case, above, and the different</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    images are loaded into the different views of the multiview</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    textures.  If the texture is already a cube map texture, the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    same hash sequence is used for both purposes: the first six images</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    define the first view, the next six images define the second view,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    and so on.  If the texture is a 3-D texture, you must also specify</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    num-views, below, to tell the loader how many images are loaded</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    for views, and how many are loaded for levels.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    A multiview texture is most often used to load stereo textures,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    where a different image is presented to each eye viewing the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture, but other uses are possible, such as for texture</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    animation.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; num-views { count }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is used only when loading a 3-D multiview texture.  It</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specifies how many different views the texture holds; the z height</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of the texture is then implicitly determined as (number of images)</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    / (number of views).</span></span></p><p class="P28"> </p><p class="P47"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; read-mipmaps { flag }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">   If this flag is nonzero, then pre-generated mipmap levels will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    loaded along with the texture.  In this case, the filename should</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    contain a sequence of one or more hash mark ("#") characters,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    which will be filled in with the mipmap level number; the texture</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    filename thus determines a series of images, one for each mipmap</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    level.  The base texture image is mipmap level 0.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this flag is specified in conjunction with a 3D or cube map</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture (as specified above), then the filename should contain two</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    hash mark sequences, separated by a character such as an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    underscore, hyphen, or dot.  The first sequence will be filled in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    with the mipmap level index, and the second sequence will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    filled in with the 3D sequence or cube map face.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; minfilter { filter-type }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; magfilter { filter-type }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; magfilteralpha { filter-type }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; magfiltercolor { filter-type }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the type of filter applied when minimizing or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    maximizing.  Filter-type may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      NEAREST</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      LINEAR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      NEAREST_MIPMAP_NEAREST</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      LINEAR_MIPMAP_NEAREST</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      NEAREST_MIPMAP_LINEAR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      LINEAR_MIPMAP_LINEAR</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    There are also some additional filter types that are supported for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    historical reasons, but each of those additional types maps to one</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of the above.  New egg files should use only the above filter</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    types.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; anisotropic-degree { degree }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Enables anisotropic filtering for the texture, and specifies the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    degree of filtering.  If the degree is 0 or 1, anisotropic</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    filtering is disabled.  The default is disabled.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; envtype { environment-type }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the type of texture environment to create; i.e. it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    controls the way in which textures apply to models.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Environment-type may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MODULATE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DECAL</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BLEND</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      REPLACE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ADD</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BLEND_COLOR_SCALE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MODULATE_GLOW</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MODULATE_GLOSS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *NORMAL</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *NORMAL_HEIGHT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *GLOW</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *GLOSS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *HEIGHT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     *SELECTOR</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The default environment type is MODULATE, which means the texture</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    color is multiplied with the base polygon (or vertex) color.  This</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is the most common texture environment by far.  Other environment</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    types are more esoteric and are especially useful in the presence</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of multitexture.  In particular, the types prefixed by an asterisk</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (*) require enabling Panda's automatic ShaderGenerator.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P49"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P29"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19"> &lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    These options replace the envtype and specify the texture combiner</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    mode, which is usually used for multitexturing.  This specifies</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    how the texture combines with the base color and/or the other</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    textures applied previously.  You must specify both an rgb and an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    alpha combine mode.  Some combine-modes use one source/operand</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    pair, and some use all three; most use just two.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    combine-mode may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      REPLACE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MODULATE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ADD</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ADD-SIGNED</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      INTERPOLATE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      SUBTRACT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DOT3-RGB</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DOT3-RGBA</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    combine-source may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      TEXTURE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      CONSTANT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      PRIMARY-COLOR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      PREVIOUS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      CONSTANT_COLOR_SCALE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      LAST_SAVED_RESULT</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    combine-operand may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      SRC-COLOR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ONE-MINUS-SRC-COLOR</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      SRC-ALPHA</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ONE-MINUS-SRC-ALPHA</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The default values if any of these are omitted are:</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">modulate</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">modulate</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">previous</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">color</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">texture</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">color</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">constant</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rgb</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">previous</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">texture</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">source2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">constant</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">combine</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">operand2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">src</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">saved</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">result</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">flag</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If flag is nonzero, then it indicates that this particular texture</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    stage will be supplied as the "last_saved_result" source for any</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    future texture stages.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">tex</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">gen</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies that texture coordinates for the primitives that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    reference this texture should be dynamically computed at runtime,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    for instance to apply a reflection map or some other effect.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    valid values for mode are:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      EYE_SPHERE_MAP (or SPHERE_MAP)</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      WORLD_CUBE_MAP</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      EYE_CUBE_MAP (or CUBE_MAP)</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      WORLD_NORMAL</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      EYE_NORMAL</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      WORLD_POSITION</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      EYE_POSITION</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      POINT_SPRITE</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; stage-name { name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies the name of the TextureStage object that is created to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    render this texture.  If this is omitted, a custom TextureStage is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    created for this texture if it is required (e.g. because some</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    other multitexturing parameter has been specified), or the system</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    default TextureStage is used if multitexturing is not required.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; priority { priority-value }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies an integer sort value to rank this texture in priority</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    among other textures that are applied to the same geometry.  This</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is only used to eliminate low-priority textures in case more</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    textures are requested for a particular piece of geometry than the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    graphics hardware can render.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; blendr { red-value }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; blendg { green-value }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; blendb { blue-value }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; blenda { alpha-value }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies a four-component color that is applied with the color in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    case the envtype, above, is "blend", or one of the combine-sources</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is "constant".</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; uv-name { name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies the name of the texture coordinates that are to be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    associated with this texture.  If this is omitted, the default</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture coordinates are used.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; rgb-scale { scale }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; alpha-scale { scale }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies an additional scale factor that will scale the r, g, b</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (or a) components after the texture has been applied.  This is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    only used when a combine mode is in effect.  The only legal values</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    are 1, 2, or 4.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; alpha { alpha-type }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies whether and what type of transparency will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    performed.  Alpha-type may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      OFF</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      ON</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BLEND</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BLEND_NO_OCCLUDE</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      MS_MASK</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BINARY</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DUAL</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If alpha-type is OFF, it means not to enable transparency, even if</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the image contains an alpha channel or the format is RGBA.  If</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    alpha-type is ON, it means to enable the default transparency,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    even if the image filename does not contain an alpha channel.  If</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    alpha-type is any of the other options, it specifies the type of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    transparency to be enabled.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; bin { bin-name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the bin name order of all polygons with this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture applied, in the absence of a bin name specified on the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    polygon itself.  See the description for bin under polygon</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    attributes.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; draw-order { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the fixed drawing order of all polygons with this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture applied, in the absence of a drawing order specified on</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the polygon itself.  See the description for draw-order under</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    polygon attributes.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-offset { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-write { mode }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-test { mode }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies special depth buffer properties of all polygons with this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    texture applied.  See the descriptions for the individual</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    attributes under polygon attributes.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; quality-level { quality }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Sets a hint to the renderer about the desired performance /</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    quality tradeoff for this particular texture.  This is most useful</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    for the tinydisplay software renderer; for normal,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    hardware-accelerated renderers, this may have little or no effect.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This may be one of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      DEFAULT</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      FASTEST</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      NORMAL</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      BEST</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    "Default" means to use whatever quality level is specified by the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    global texture-quality-level config variable.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Transform&gt; { transform-definition }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies a 2-d or 3-d transformation that is applied to the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    UV's of a surface to generate the texture coordinates.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The transform syntax is similar to that for groups, except it may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    define either a 2-d 3x3 matrix or a 3-d 4x4 matrix.  (You should</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    use the two-dimensional forms if the UV's are two-dimensional, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the three-dimensional forms if the UV's are three-dimensional.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    A two-dimensional transform may be any sequence of zero or more of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the following.  Transformations are post multiplied in the order</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    they are encountered to produce a net transformation matrix.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Rotations are counterclockwise about the origin in degrees.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Matrices, when specified explicitly, are row-major.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Translate&gt; { x y }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Rotate&gt; { degrees }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Scale&gt; { x y }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Scale&gt; { s }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Matrix3&gt; {</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        00 01 02</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        10 11 12</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        20 21 22</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    A three-dimensional transform may be any sequence of zero or more</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of the following.  See the description under &lt;Group&gt;, below, for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    more information.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Translate&gt; { x y z }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;RotX&gt; { degrees }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;RotY&gt; { degrees }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;RotZ&gt; { degrees }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Rotate&gt; { degrees x y z }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Scale&gt; { x y z }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Scale&gt; { s }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Matrix4&gt; {</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        00 01 02 03</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        10 11 12 13</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        20 21 22 23</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        30 31 32 33</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      }</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;Material&gt; name { [scalars] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This defines a set of material attributes that may later be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  referenced with &lt;MRef&gt; { name }.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The following attributes may appear within the material block:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; diffr { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; diffg { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; diffb { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; diffa { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; ambr { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; ambg { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; ambb { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; amba { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; emitr { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; emitg { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; emitb { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; emita { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; specr { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; specg { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; specb { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; speca { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; shininess { number }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; local { flag }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  These properties collectively define a "material" that controls the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  lighting effects that are applied to a surface; a material is only</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  in effect in the presence of lighting.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The four color groups, diff*, amb*, emit*, and spec* specify the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  diffuse, ambient, emission, and specular components of the lighting</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  equation, respectively.  Any of them may be omitted; the omitted</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  component(s) take their color from the native color of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  primitive, otherwise the primitive color is replaced with the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  material color.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The shininess property controls the size of the specular highlight,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and the value ranges from 0 to 128.  A larger value creates a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  smaller highlight (creating the appearance of a shinier surface).</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;VertexPool&gt; name { vertices }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A vertex pool is a set of vertices.  All geometry is created by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  referring to vertices by number in a particular vertex pool.  There</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  may be one or several vertex pools in an egg file, but all vertices</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  that make up a single polygon must come from the same vertex pool.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The body of a &lt;VertexPool&gt; entry is simply a list of one or more</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Vertex&gt; entries, as follows:</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Vertex&gt; number { x [y [z [w]]] [attributes] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    A &lt;Vertex&gt; entry is only valid within a vertex pool definition.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The number is the index by which this vertex will be referenced.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    It is optional; if it is omitted, the vertices are implicitly</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    numbered consecutively beginning at one.  If the number is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    supplied, the vertices need not be consecutive.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Normally, vertices are three-dimensional (with coordinates x, y,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    and z); however, in certain cases vertices may have fewer or more</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    dimensions, up to four.  This is particularly true of vertices</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    used as control vertices of NURBS curves and surfaces.  If more</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    coordinates are supplied than needed, the extra coordinates are</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    ignored; if fewer are supplied than needed, the missing</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    coordinates are assumed to be 0.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The vertex's coordinates are always given in world space,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    regardless of any transforms before the vertex pool or before the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    referencing geometry.  If the vertex is referenced by geometry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    under a transform, the egg loader will do an inverse transform to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    move the vertex into the proper coordinate space without changing</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    its position in world space.  One exception is geometry under an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Instance&gt; node; in this case the vertex coordinates are given in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the space of the &lt;Instance&gt; node.  (Another exception is a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;DynamicVertexPool&gt;; see below.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    In neither case does it make a difference whether the vertex pool</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is itself declared under a transform or an &lt;Instance&gt; node.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    only deciding factor is whether the geometry that *uses* the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertex pool appears under an &lt;Instance&gt; node.  It is possible for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    a single vertex to be interpreted in different coordinate spaces</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    by different polygons.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    While each vertex must at least have a position, it may also have</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    a color, normal, pair of UV coordinates, and/or a set of morph</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    offsets.  Furthermore, the color, normal, and UV coordinates may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    themselves have morph offsets.  Thus, the [attributes] in the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    syntax line above may be replaced with zero or more of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    following entries:</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Dxyz&gt; target { x y z }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the offset of this vertex for the named morph</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    target.  See the "MORPH DESCRIPTION ENTRIES" header, below.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Normal&gt; { x y z [morph-list] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the surface normal of the vertex.  If omitted, the</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertex will have no normal.  Normals may also be morphed;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    morph-list here is thus an optional list of &lt;DNormal&gt; entries,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    similar to the above.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;RGBA&gt; { r g b a [morph-list] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the four-valued color of the vertex.  Each</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    component is in the range 0.0 to 1.0.  A vertex color, if</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified for all vertices of the polygon, overrides the polygon's</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    color.  If neither color is given, the default is white</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (1 1 1 1).  The morph-list is an optional list of &lt;DRGBA&gt; entries.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;UV&gt; [name] { u v [w] [tangent] [binormal] [morph-list] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This gives the texture coordinates of the vertex.  This must be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified if a texture is to be mapped onto this geometry.  </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The texture coordinates are usually two-dimensional, with two</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    component values (u v), but they may also be three-dimensional,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    with three component values (u v w).  (Arguably, it should be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    called &lt;UVW&gt; instead of &lt;UV&gt; in the three-dimensional case, but</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    it's not.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    As before, morph-list is an optional list of &lt;DUV&gt; entries.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Unlike the other kinds of attributes, there may be multiple sets</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of UV's on each vertex, each with a unique name; this provides</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    support for multitexturing.  The name may be omitted to specify</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the default UV's.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The UV's also support an optional tangent and binormal.  These</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    values are based on the vertex normal and the UV coordinates of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    connected vertices, and are used to render normal maps and similar</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    lighting effects.  They are defined within the &lt;UV&gt; entry because</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    there may be a different set of tangents and binormals for each</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    different UV coordinate set.  If present, they have the expected</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    syntax:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;UV&gt; [name] { u v [w] &lt;Tangent&gt; { x y z } &lt;Binormal&gt; { x y z } }</span></span></p><p class="P28"/><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;AUX&gt; name { x y z w }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies some named per-vertex auxiliary data which is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    imported from the egg file without further interpretation by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Panda.  The auxiliary data is copied to the vertex data under a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    column with the specified name.  Presumably the data will have</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    meaning to custom code or a custom shader.  Like named UV's, there</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    may be multiple Aux entries for a given vertex, each with a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    different name.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;DynamicVertexPool&gt; name { vertices }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A dynamic vertex pool is similar to a vertex pool in most respects,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  except that each vertex might be animated by substituting in values</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  from a &lt;VertexAnim&gt; table.  Also, the vertices defined within a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  dynamic vertex pool are always given in local coordinates, instead</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  of world coordinates.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The presence of a dynamic vertex pool makes sense only within a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  character model, and a single dynamic vertex pool may not span</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  multiple characters.  Each dynamic vertex pool creates a DynVerts</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  object within the character by the same name; this name is used</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  later when matching up the corresponding &lt;VertexAnim&gt;.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  At the present time, the DynamicVertexPool is not implemented in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Panda3D.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><h3 class="Heading_20_3"><a id="a__GEOMETRY_ENTRIES"><span/></a><a name="__RefHeading__7678_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">GEOMETRY ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;Polygon&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P30"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P30"><span class="_5f_OOoComputerKeyWord"><span class="T15">    } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P47"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A polygon consists of a sequence of vertices from a single vertex</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  pool.  Vertices are identified by pool-name and index number within</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the pool; indices is a list of vertex numbers within the given</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex pool.  Vertices are listed in counterclockwise order.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Although the vertices must all come from the same vertex pool, they</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  may have been assigned to arbitrarily many different joints</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  regardless of joint connectivity (there is no "straddle-polygon"</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  limitation).  See Joints, below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The polygon syntax is quite verbose, and there isn't any way to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  specify a set of attributes that applies to a group of polygons--the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attributes list must be repeated for each polygon.  This is why egg</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  files tend to be very large.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The following attributes may be specified for polygons:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;TRef&gt; { texture-name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This refers to a named &lt;Texture&gt; entry given earlier.  It applies</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the given texture to the polygon.  This requires that all the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    polygon's vertices have been assigned texture coordinates.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This attribute may be repeated multiple times to specify</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    multitexture.  In this case, each named texture is applied to the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    polygon, in the order specified.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Texture&gt; { filename }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is another way to apply a texture to a polygon.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Texture&gt; entry is defined "inline" to the polygon, instead of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    referring to a &lt;Texture&gt; entry given earlier.  There is no way to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specify texture attributes given this form.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    There's no advantage to this syntax for texture mapping.  It's</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    supported only because it's required by some older egg files.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;MRef&gt; { material-name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This applies the material properties defined in the earlier</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Material&gt; entry to the polygon.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Normal&gt; { x y z [morph-list] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines a polygon surface normal.  The polygon normal will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    used unless all vertices also have a normal.  If no normal is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    defined, none will be supplied.  The polygon normal, like the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertex normal, may be morphed by specifying a series of &lt;DNormal&gt;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    entries.  </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The polygon normal is used only for lighting and environment</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    mapping calculations, and is not related to the implicit normal</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    calculated for CollisionPolygons.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;RGBA&gt; { r g b a [morph-list] }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines the polygon's color, which will be used unless all</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertices also have a color.  If no color is defined, the default</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is white (1 1 1 1).  The color may be morphed with a series of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;DRGBA&gt; entries.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;BFace&gt; { boolean-value }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines whether the polygon will be rendered double-sided</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (i.e. its back face will be visible).  By default, this option is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    disabled, and polygons are one-sided; specifying a nonzero value</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    disables backface culling for this particular polygon and allows</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    it to be viewed from either side.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; bin { bin-name }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    It is sometimes important to control the order in which objects</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    are rendered, particularly when transparency is in use.  In Panda,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    this is achieved via the use of named bins and, within certain</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    kinds of bins, sometimes an explicit draw-order is also used (see</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    below).</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    In the normal (state-sorting) mode, Panda renders its geometry by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    first grouping into one or more named bins, and then rendering the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    bins in a specified order.  The programmer is free to define any</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    number of bins, named whatever he/she desires.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This scalar specifies which bin this particular polygon is to be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    rendered within.  If no bin scalar is given, or if the name given</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    does not match any of the known bins, the polygon will be assigned</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    to the default bin, which renders all opaque geometry sorted by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    state, followed by all transparent geometry sorted back-to-front.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    See also draw-order, below.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; draw-order { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This works in conjunction with bin, above, to further refine the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    order in which this polygon is drawn, relative to other geometry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    in the same bin.  If (and only if) the bin type named in the bin</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    scalar is a CullBinFixed, this draw-order is used to define the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    fixed order that all geometry in the same will be rendered, from</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    smaller numbers to larger numbers.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If the draw-order scalar is specified but no bin scalar is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    specified, the default is a bin named "fixed", which is a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    CullBinFixed object that always exists by default.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-offset { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies a special depth offset to be applied to the polygon.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This must be an integer value between 0 and 16 or so.  The default</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    value is 0; values larger than 0 will cause the polygon to appear</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    closer to the camera for purposes of evaluating the depth buffer.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This can be a simple way to resolve Z-fighting between coplanar</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    polygons: with two or more coplanar polygons, the polygon with the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    highest depth-offset value will appear to be visible on top.  Note</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    that this effect doesn't necessarily work well when the polygons</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    are viewed from a steep angle.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-write { mode }</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies the mode for writing to the depth buffer.  This may be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    ON or OFF.  The default is ON.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; depth-test { mode }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies the mode for testing against the depth buffer.  This may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be ON or OFF.  The default is ON.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; visibility { hidden | normal }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If the visibility of a primitive is set to "hidden", the primitive</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is not generated as a normally visible primitive.  If the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Config.prc variable egg-suppress-hidden is set to true, the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    primitive is not converted at all; otherwise, it is converted as a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    "stashed" node.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This, like the other rendering flags alpha, draw-order, and bin,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    may be specified at the group level, within the primitive level,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    or even within a texture.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;Patch&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A patch is similar to a polygon, but it is a special primitive that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  can only be rendered with the use of a tessellation shader.  Each</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  patch consists of an arbitrary number of vertices; all patches with</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the same number of vertices are collected together into the same</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  GeomPatches object to be delivered to the shader in a single batch.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  It is then up to the shader to create the correct set of triangles</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  from the patch data.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  All of the attributes that are valid for Polygon, above, may also be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  specified for Patch.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;PointLight&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A PointLight is a set of single points.  One point is drawn for each</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex listed in the &lt;VertexRef&gt;.  Normals, textures, and colors may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  be specified for PointLights, as well as draw-order, plus one</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  additional attribute valid only for PointLights and Lines:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; thick { number }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the size of the PointLight (or the width of a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    line), in pixels, when it is rendered.  This may be a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    floating-point number, but the fractional part is meaningful only</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    when antialiasing is in effect.  The default is 1.0.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Scalar&gt; perspective { boolean-value }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this is specified, then the thickness, above, is to interpreted</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    as a size in 3-d spatial units, rather than a size in pixels, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the point should be scaled according to its distance from the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    viewer normally.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;Line&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [component attributes]</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A Line is a connected set of line segments.  The listed N vertices</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  define a series of N-1 line segments, drawn between vertex 0 and</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex 1, vertex 1 and vertex 2, etc.  The line is not implicitly</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  closed; if you wish to represent a loop, you must repeat vertex 0 at</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the end.  As with a PointLight, normals, textures, colors,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  draw-order, and the "thick" attribute are all valid (but not</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  "perspective").  Also, since a Line (with more than two vertices) is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  made up of multiple line segments, it may contain a number of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Component&gt; entries, to set a different color and/or normal for each</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  line segment, as in TriangleStrip, below.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;TriangleStrip&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [component attributes]</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A triangle strip is only rarely encountered in an egg file; it is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  normally generated automatically only during load time, when</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  connected triangles are automatically meshed for loading, and even</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  then it exists only momentarily.  Since a triangle strip is a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  rendering optimization only and adds no useful scene information</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  over a loose collection of triangles, its usage is contrary to the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  general egg philosophy of representing a scene in the abstract.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Nevertheless, the syntax exists, primarily to allow inspection of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the meshing results when needed.  You can also add custom</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  TriangleStrip entries to force a particular mesh arrangement.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A triangle strip is defined as a series of connected triangles.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  After the first three vertices, which define the first triangle,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  each new vertex defines one additional triangle, by alternating up</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and down.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  It is possible for the individual triangles of a triangle strip to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  have a separate normal and/or color.  If so, a &lt;Component&gt; entry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  should be given for each so-modified triangle:</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Component&gt; index {</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;RGBA&gt; { r g b a [morph-list] }</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;Normal&gt; { x y z [morph-list] }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  }</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Where index ranges from 0 to the number of components defined by the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  triangle strip (less 1).  Note that the component attribute list</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  must always follow the vertex list.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">&lt;TriangleFan&gt; name { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [attributes] </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    &lt;VertexRef&gt; { </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        indices </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        &lt;Ref&gt; { pool-name } </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    }</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    [component attributes]</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A triangle fan is similar to a triangle strip, except all of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  connected triangles share the same vertex, which is the first</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex.  See &lt;TriangleStrip&gt;, above.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><h3 class="P68"><a id="a__PARAMETRIC_DESCRIPTION_ENTRIES"><span/></a><a name="__RefHeading__7680_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">PARAMETRIC DESCRIPTION ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">The following entries define parametric curves and surfaces.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Generally, Panda supports these only in the abstract; they're not</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">geometry in the true sense but do exist in the scene graph and may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">have specific meaning to the application.  However, Panda can create</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">visible representations of these parametrics to aid visualization.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">These entries might also have meaning to external tools outside of an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">interactive Panda session, such as egg-qtess, which can be used to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">convert NURBS surfaces to polygons at different levels of resolution.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">In general, dynamic attributes such as morphs and joint assignment are</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">legal for the control vertices of the following parametrics, but Panda</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">itself doesn't support them and will always create static curves and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">surfaces.  External tools like egg-qtess, however, may respect them.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">NURBSCurve</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">attributes</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Order</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Knots</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knot</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">indices</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">pool</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A NURBS curve is a general parametric curve.  It is often used to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  represent a motion path, e.g. for a camera or an object.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The order is equal to the degree of the polynomial basis plus 1.  It</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  must be an integer in the range [1,4].</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The number of vertices must be equal to the number of knots minus the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  order.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Each control vertex of a NURBS is defined in homogeneous space with</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  four coordinates x y z w (to convert to 3-space, divide x, y, and z</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  by w).  The last coordinate is always the homogeneous coordinate; if</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  only three coordinates are given, it specifies a curve in two</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  dimensions plus a homogeneous coordinate (x y w).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The following attributes may be defined:</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">curve</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines the semanting meaning of this curve, either XYZ, HPR,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    or T.  If the type is XYZ, the curve will automatically be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    transformed between Y-up and Z-up if necessary; otherwise, it will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be left alone.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">subdiv</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">num</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">segments</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this scalar is given and nonzero, Panda will create a visible</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    representation of the curve when the scene is loaded.  The number</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    represents the number of line segments to draw to approximate the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    curve.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">RGBA</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">r</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">g</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">b</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">a</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">morph</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the color of the overall curve.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  NURBS control vertices may also be given color and/or morph</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attributes, but &lt;Normal&gt; and &lt;UV&gt; entries do not apply to NURBS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertices.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">NURBSSurface</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">attributes</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Order</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">u</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">v</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">U</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knots</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">u</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knot</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knots</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">v</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knot</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">indices</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">pool</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A NURBS surface is an extension of a NURBS curve into two parametric</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  dimensions, u and v.  NURBS surfaces may be given the same set of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attributes assigned to polygons, except for normals: &lt;TRef&gt;,</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Texture&gt;, &lt;MRef&gt;, &lt;RGBA&gt;, and draw-order are all valid attributes</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  for NURBS.  NURBS vertices, similarly, may be colored or morphed,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  but &lt;Normal&gt; and &lt;UV&gt; entries do not apply to NURBS vertices.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attributes may also include &lt;NURBSCurve&gt; and &lt;Trim&gt; entries; see</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  To have Panda create a visualization of a NURBS surface, the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  following two attributes should be defined as well:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">U</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">subdiv</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">u</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">num</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">segments</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">subdiv</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">v</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">num</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">segments</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    These define the number of subdivisions to make in the U and V</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    directions to represent the surface.  A uniform subdivision is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    always made, and trim curves are not respected (though they will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be drawn in if the trim curves themselves also have a subiv</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    parameter).  This is only intended as a cheesy visualization.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The same sort of restrictions on order and knots applies to NURBS</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  surfaces as do to NURBS curves.  The order and knot description may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  be different in each dimension.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The surface must have u-num * v-num vertices, where u-num is the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  number of u-knots minus the u-order, and v-num is the number of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  v-knots minus the v-order.  All vertices must come from the same</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex pool.  The nth (zero-based) index number defines control</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex (u, v) of the surface, where n = (v * u-num) + u.  Thus, it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  is the u coordinate which changes faster.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  As with the NURBS curve, each control vertex is defined in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  homogeneous space with four coordinates x y z w.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A NURBS may also contain curves on its surface.  These are one or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  more nested &lt;NURBSCurve&gt; entries included with the attributes; these</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  curves are defined in the two-dimensional parametric space of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  surface.  Thus, these curve vertices should have only two dimensions</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  plus the homogeneous coordinate: u v w.  A curve-on-surface has no</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  intrinsic meaning to the surface, unless it is defined within a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Trim&gt; entry, below.</span></span></p><p class="P28"> </p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Finally, a NURBS may be trimmed by one or more trim curves.  These</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  are special curves on the surface which exclude certain areas from</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the NURBS surface definition.  The inside is specified using two</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  rules: an odd winding rule that states that the inside consists of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  all regions for which an infinite ray from any point in the region</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  will intersect the trim curve an odd number of times, and a curve</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  orientation rule that states that the inside consists of the regions</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  to the left as the curve is traced.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Each trim curve contains one or more loops, and each loop contains</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  one or more NURBS curves.  The curves of a loop connect in a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  head-to-tail fashion and must be explicitly closed.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The trim curve syntax is as follows:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Trim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">Loop</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">NURBSCurve</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Order</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Knots</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">knot</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">indices</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">pool</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">NURBSCurve</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">Loop</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Although the egg syntax supports trim curves, there are at present</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  no egg processing tools that respect them.  For instance, egg-qtess</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  ignores trim curves and always tesselates the entire NURBS surface.</span></span></p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__MORPH_DESCRIPTION_ENTRIES"><span/></a><a name="__RefHeading__7682_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">MORPH DESCRIPTION ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">Morphs are linear interpolations of attribute values at run time,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">according to values read from an animation table.  In general, vertex</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">positions, surface normals, texture coordinates, and colors may be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">morphed.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">A morph target is defined by giving a net morph offset for a series of</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">vertex or polygon attributes; this offset is the value that will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">added to the attribute when the morph target has the value 1.0.  At</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">run time, the morph target's value may be animated to any scalar value</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">(but generally between 0.0 and 1.0); the corresponding fraction of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">offset is added to the attribute each frame.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">There is no explicit morph target definition; a morph target exists</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">solely as the set of all offsets that share the same target name.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">target name may be any arbitrary string; like any name in an egg file,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">it should be quoted if it contains special characters.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">The following types of morph offsets may be defined, within their</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">corresponding attribute entries:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Dxyz</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">target</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A position delta, valid within a &lt;Vertex&gt; entry or a &lt;CV&gt; entry.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The given offset vector, scaled by the morph target's value, is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  added to the vertex or CV position each frame.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DNormal</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">target</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A normal delta, similar to the position delta, valid within a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Normal&gt; entry (for vertex or polygon normals).  The given offset</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vector, scaled by the morph target's value, is added to the normal</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vector each frame.  The resulting vector may not be automatically</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  normalized to unit length.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DUV</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">target</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">u</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">v</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">w</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A texture-coordinate delta, valid within a &lt;UV&gt; entry (within a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Vertex&gt; entry).  The offset vector should be 2-valued if the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  enclosing UV is 2-valued, or 3-valued if the enclosing UV is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  3-valued.  The given offset vector, scaled by the morph target's</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  value, is added to the vertex's texture coordinates each frame.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DRGBA</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">target</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">r</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">g</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">b</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">a</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A color delta, valid within an &lt;RGBA&gt; entry (for vertex or polygon colors).  The given 4-valued offset vector, scaled by the morph</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  target's value, is added to the color value each frame.</span></span></p><h3 class="Heading_20_3"><a id="a__GROUPING_ENTRIES"><span/></a><a name="__RefHeading__7684_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">GROUPING ENTRIES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">body</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A &lt;Group&gt; node is the primary means of providing structure to the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  egg file.  Groups can contain vertex pools and polygons, as well as</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  other groups.  The egg loader translates &lt;Group&gt; nodes directly into</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  PandaNodes in the scene graph (although the egg loader reserves the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  right to arbitrarily remove nodes that it deems unimportant--see the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Model&gt; flag, below to avoid this).  In addition, the following</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  entries can be given specifically within a &lt;Group&gt; node to specify</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  attributes of the group:</span></span></p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__GROUP_BINARY_ATTRIBUTES"><span/></a><a name="__RefHeading__7686_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">  GROUP BINARY ATTRIBUTES</span></span></h3><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  These attributes may be either on or off; they are off by default.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  They are turned on by specifying a non-zero "boolean-value".</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DCS</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    DCS stands for Dynamic Coordinate System.  This indicates that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    show code will expect to be able to read the transform set on this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    node at run time, and may need to modify the transform further.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a special case of &lt;Model&gt;, below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DCS</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">dcs</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is another syntax for the &lt;DCS&gt; flag.  The dcs-type string</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    should be one of either "local" or "net", which specifies the kind</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of preserve_transform flag that will be set on the corresponding</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    ModelNode.  If the string is "local", it indicates that the local</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    transform on this node (as well as the net transform) will not be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    affected by any flattening operation and will be preserved through</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the entire model loading process.  If the string is "net", then</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    only the net transform will be preserved; the local transform may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be adjusted in the event of a flatten operation.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Model</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This indicates that the show code might need a pointer to this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    particular group.  This creates a ModelNode at the corresponding</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">    level, which is guaranteed not to be removed by any flatten</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    operation.  However, its transform might still be changed, but see</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    also the &lt;DCS&gt; flag, above.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Dart</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This indicates that this group begins an animated character.  A</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Character node, which is the fundamental animatable object of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Panda's high-level Actor class, will be created for this group.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This flag should always be present within the &lt;Group&gt; entry at the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    top of any hierarchy of &lt;Joint&gt;'s and/or geometry with morphed</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertices; joints and morphs appearing outside of a hierarchy</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    identified with a &lt;Dart&gt; flag are undefined.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Switch</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This attribute indicates that the child nodes of this group</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    represent a series of animation frames that should be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    consecutively displayed.  In the absence of an "fps" scalar for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the group (see below), the egg loader creates a SwitchNode, and it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the responsibility of the show code to perform the switching.  If</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    an fps scalar is defined and is nonzero, the egg loader creates a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    SequenceNode instead, which automatically cycles through its</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    children.</span></span></p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__GROUP_SCALARS"><span/></a><a name="__RefHeading__7688_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">  GROUP SCALARS</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">frame</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">rate</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the rate of animation for a SequenceNode (created</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    when the Switch flag is specified, see above).  A value of zero</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    indicates a SwitchNode should be created instead.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">bin</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">bin</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the bin name for all polygons at or below this node</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    that do not explicitly set their own bin.  See the description of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    bin for geometry attributes, above.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">draw</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">number</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies the drawing order for all polygons at or below this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    node that do not explicitly set their own drawing order.  See the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    description of draw-order for geometry attributes, above.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">depth</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">offset</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">number</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">depth</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">write</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">depth</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">test</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies special depth buffer properties of all polygons at or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    below this node that do not override this.  See the descriptions</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    for the individual attributes under polygon attributes.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">visibility</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">hidden</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">|</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">normal</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If the visibility of a group is set to "hidden", the primitives</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    nested within that group are not generated as a normally visible</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    primitive.  If the Config.prc variable egg-suppress-hidden is set</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    to true, the primitives are not converted at all; otherwise, they</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    are converted as a "stashed" node.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">decal</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If this is present and boolean-value is non-zero, it indicates</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    that the geometry *below* this level is coplanar with the geometry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    *at* this level, and the geometry below is to be drawn as a decal</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    onto the geometry at this level.  This means the geometry below</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    this level will be rendered "on top of" this geometry, but without</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the Z-fighting artifacts one might expect without the use of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    decal flag.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">decalbase</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This can optionally be used with the "decal" scalar, above.  If</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    present, it should be applied to a sibling of one or more nodes</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    with the "decal" scalar on.  It indicates which of the sibling</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    nodes should be treated as the base of the decal.  In the absence</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of this scalar, the parent of all decal nodes is used as the decal</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    base.  This scalar is useful when the modeling package is unable</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    to parent geometry nodes to other geometry nodes.</span></span></p><p class="P28"> </p><p class="P47"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">collide</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mask</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">from</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">collide</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mask</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">into</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">collide</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mask</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Sets the CollideMasks on the collision nodes and geometry nodes</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      created at or below this group to the indicated values.  These</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      are bits that indicate which objects can collide with which</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      other objects.  Setting "collide-mask" is equivalent to setting</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      both "from-collide-mask" and "into-collide-mask" to the same</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      value.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The value may be an ordinary decimal integer, or a hex number in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      the form 0x000, or a binary number in the form 0b000.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blend</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Specifies that a special blend mode should be applied geometry at</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    this level and below.  The available options are none, add,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    subtract, inv-subtract, min, and max.  See ColorBlendAttrib.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blendop</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">a</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blendop</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">b</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">mode</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If blend mode, above, is not none, this specifies the A and B</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    operands to the blend equation.  Common options are zero, one,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    incoming-color, one-minus-incoming-color.  See ColorBlendAttrib</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    for the complete list of available options.  The default is "one".</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blendr</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">red</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blendg</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">green</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blendb</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blue</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">blenda</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">alpha</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    If blend mode, above, is not none, and one of the blend operands</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is constant-color or a related option, this defines the constant</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    color that will be used.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">occluder</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">boolean</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This makes the first (or only) polygon within this group node into</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    an occluder.  The polygon must have exactly four vertices.  An</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    occluder polygon is invisible.  When the occluder is activated</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    with model.set_occluder(occluder), objects that are behind the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    occluder will not be drawn.  This can be a useful rendering</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    optimization for complex scenes, but should not be overused or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    performance can suffer.</span></span></p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__OTHER_GROUP_ATTRIBUTES"><span/></a><a name="__RefHeading__7690_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">  OTHER GROUP ATTRIBUTES</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Billboard</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This entry indicates that all geometry defined at or below this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    group level is part of a billboard that will rotate to face the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    camera.  Type is either "axis" or "point", describing the type of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    rotation.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Billboards rotate about their local axis.  In the case of a Y-up</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    file, the billboards rotate about the Y axis; in a Z-up file, they</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    rotate about the Z axis.  Point-rotation billboards rotate about</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the origin.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    There is an implicit &lt;Instance&gt; around billboard geometry.  This</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    means that the geometry within a billboard is not specified in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    world coordinates, but in the local billboard space.  Thus, a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertex drawn at point 0,0,0 will appear to be at the pivot point</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of the billboard, not at the origin of the scene.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">SwitchCondition</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Distance</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">in</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerInstruction"><span class="T19">out</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fade</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Vertex</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">     </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The subtree beginning at this node and below represents a single</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    level of detail for a particular model.  Sibling nodes represent</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the additional levels of detail.  The geometry at this node will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be visible when the point (x, y, z) is closer than "in" units, but</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    further than "out" units, from the camera.  "fade" is presently</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    ignored.</span></span></p><p class="P28"> </p><p class="P47"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Tag</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">key</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This attribute defines the indicated tag (as a key/value pair),</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    retrievable via NodePath::get_tag() and related interfaces, on</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    this node.</span></span></p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a___Collide__name_{_type__flags__}"><span/></a><a name="__RefHeading__7692_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Collide&gt; name { type [flags] }</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This entry indicates that geometry defined at this group level is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    actually an invisible collision surface, and is not true geometry.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The geometry is used to define the extents of the collision</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    surface.  If there is no geometry defined at this level, then a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    child is searched for with the same collision type specified, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    its geometry is used to define the extent of the collision</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    surface (unless the "descend" flag is given; see below).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Valid types so far are:</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7694_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Plane</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents an infinite plane.  The first polygon</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      found in the group will define the plane.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7696_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Polygon</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents a single polygon.  The first polygon is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      used.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7698_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Polyset</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents a complex shape made up of several</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      polygons.  This collision type should not be overused, as it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      provides the least optimization benefit.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7700_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Sphere</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents a sphere.  The vertices in the group are</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      averaged together to determine the sphere's center and radius.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7702_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Box</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents a box.  The smalles axis-alligned box</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      that will fit around the vertices is used.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7704_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    InvSphere</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents an inverse sphere.  This is the same as</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Sphere, with the normal inverted, so that the solid part of an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      inverse sphere is the entire world outside of it.  Note that an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      inverse sphere is in infinitely large solid with a finite hole</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      cut into it.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7706_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    Tube</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry represents a tube.  This is a cylinder-like shape</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      with hemispherical endcaps; it is sometimes called a capsule or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      a lozenge in other packages.  The smallest tube shape that will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      fit around the vertices is used.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The flags may be any zero or more of:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    event</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Throws the name of the &lt;Collide&gt; entry, or the name of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      surface if the &lt;Collide&gt; entry has no name, as an event whenever</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      an avatar strikes the solid.  This is the default if the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      &lt;Collide&gt; entry has a name.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    intangible</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Rather than being a solid collision surface, the defined surface</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      represents a boundary.  The name of the surface will be thrown</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      as an event when an avatar crosses into the interior, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      name-out will be thrown when an avater exits.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    descend</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Instead of creating only one collision object of the given type,</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      each group descended from this node that contains geometry will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      define a new collision object of the given type.  The event</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      name, if any, will also be inherited from the top node and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      shared among all the collision objects.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    keep</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Don't discard the visible geometry after using it to define a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      collision surface; create both an invisible collision surface</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      and the visible geometry.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    level</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Stores a special effective normal with the collision solid that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      points up, regardless of the actual shape or orientation of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      solid.  This can be used to allow an avatar to stand on a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      sloping surface without having a tendency to slide downward.</span></span></p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a___ObjectType__{_type_}"><span/></a><a name="__RefHeading__7708_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">ObjectType</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">type</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a short form to indicate one of several pre-canned sets of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    attributes.  Type may be any word, and a Config definition will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    searched for by the name "egg-object-type-word", where "word" is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the type word.  This definition may contain any arbitrary egg</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    syntax to be parsed in at this group level.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    A number of predefined ObjectType definitions are provided:</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7710_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    barrier</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      This is equivalent to &lt;Collide&gt; { Polyset descend }.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      geometry defined at this root and below defines an invisible</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      collision solid.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7712_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    trigger</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      This is equivalent to &lt;Collide&gt; { Polyset descend intangible }.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      The geometry defined at this root and below defines an invisible</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      trigger surface.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7714_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    sphere</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Equivalent to &lt;Collide&gt; { Sphere descend }.  The geometry is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      replaced with the smallest collision sphere that will enclose</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      it.  Typically you model a sphere in polygons and put this flag</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      on it to create a collision sphere of the same size.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7716_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    tube</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Equivalent to &lt;Collide&gt; { Tube descend }.  As in sphere, above,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      but the geometry is replaced with a collision tube (a capsule).</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Typically you will model a capsule or a cylinder in polygons.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7718_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    bubble</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Equivalent to &lt;Collide&gt; { Sphere keep descend }.  A collision</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      bubble is placed around the geometry, which is otherwise</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      unchanged.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7720_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    ghost</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      Equivalent to &lt;Scalar&gt; collide-mask { 0 }.  It means that the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      geometry beginning at this node and below should never be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      collided with--characters will pass through it.</span></span></p><p class="P28"> </p><p class="Contents_20_1"><a name="__RefHeading__7722_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">    backstage</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      This has no equivalent; it is treated as a special case.  It</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      means that the geometry at this node and below should not be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      translated.  This will normally be used on scale references and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      other modeling tools.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    There may also be additional predefined egg object types not</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    listed here; see the *.pp files that are installed into the etc</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    directory for a complete list.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This specifies a matrix transform at this group level.  This</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    defines a local coordinate space for this group and its</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    descendents.  Vertices are still specified in world coordinates</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (in a vertex pool), but any geometry assigned to this group will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be inverse transformed to move its vertices to the local space.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The transform definition may be any sequence of zero or more of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the following.  Transformations are post multiplied in the order</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    they are encountered to produce a net transformation matrix.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Rotations are defined as a counterclockwise angle in degrees about</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    a particular axis, either implicit (about the x, y, or z axis), or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    arbitrary.  Matrices, when specified explicitly, are row-major.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Translate</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">RotX</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">degrees</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">RotY</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">degrees</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">RotZ</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">degrees</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Rotate</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">degrees</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scale</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scale</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">s</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Matrix4</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">00</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">01</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">02</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">03</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">10</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">11</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">12</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">13</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">21</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">22</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">23</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">30</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">31</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">32</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">33</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Note that the &lt;Transform&gt; block should always define a 3-d</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    transform when it appears within the body of a &lt;Group&gt;, while it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    may define either a 2-d or a 3-d transform when it appears within</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the body of a &lt;Texture&gt;.  See &lt;Texture&gt;, above.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">DefaultPose</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">definition</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This defines an optional default pose transform, which might be a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    different transform from that defined by the &lt;Transform&gt; entry,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    above.  This makes sense only for a &lt;Joint&gt;.  See the &lt;Joint&gt;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    description, below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The default pose transform defines the transform the joint will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    maintain in the absence of any animation being applied.  This is</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    different from the &lt;Transform&gt; entry, which defines the coordinate</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    space the joint must have in order to keep its vertices in their</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    (global space) position as given in the egg file.  If this is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    different from the &lt;Transform&gt; entry, the joint's vertices will</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    *not* be in their egg file position at initial load.  If there is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    no &lt;DefaultPose&gt; entry for a particular joint, the implicit</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    default-pose transform is the same as the &lt;Transform&gt; entry.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    Normally, the &lt;DefaultPose&gt; entry, if any, is created by the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    egg-optchar -defpose option.  Most other software has little</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    reason to specify an explicit &lt;DefaultPose&gt;.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">indices</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">pool</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This moves geometry created from the named vertices into the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    current group, regardless of the group in which the geometry is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    actually defined.  See the &lt;Joint&gt; description, below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">AnimPreload</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">float</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">num</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">frames</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">integer</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">value</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    One or more AnimPreload entries may appear within the &lt;Group&gt; that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    contains a &lt;Dart&gt; entry, indicating an animated character (see</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    above).  These AnimPreload entries record the minimal preloaded</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    animation data required in order to support asynchronous animation</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    binding.  These entries are typically generated by the egg-optchar</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    program with the -preload option, and are used by the Actor code</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    when allow-async-bind is True (the default).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Instance</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">body</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  An &lt;Instance&gt; node is exactly like a &lt;Group&gt; node, except that</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertices referenced by geometry created under the &lt;Instance&gt; node</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  are not assumed to be given in world coordinates, but are instead</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  given in the local space of the &lt;Instance&gt; node itself (including</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  any transforms given to the node).</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  In other words, geometry under an &lt;Instance&gt; node is defined in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  local coordinates.  In principle, similar geometry can be created</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  under several different &lt;Instance&gt; nodes, and thus can be positioned</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  in a different place in the scene each instance.  This doesn't</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  necessarily imply the use of shared geometry in the Panda3D scene</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  graph, but see the &lt;Ref&gt; syntax, below.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This is particularly useful in conjunction with a &lt;File&gt; entry, to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  load external file references at places other than the origin.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A special syntax of &lt;Instance&gt; entries does actually create shared</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  geometry in the scene graph.  The syntax is:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Instance</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  In this case, the referenced group name will appear as a duplicate</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  instance in this part of the tree.  Local transforms can be applied</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and are relative to the referencing group's transform.  The</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  referenced group must appear preceding this point in the egg file,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and it will also be a part of the scene in the point at which it</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  first appears.  The referenced group may be either a &lt;Group&gt; or an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Instance&gt; of its own; usually, it is a &lt;Group&gt; nested within an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  earlier &lt;Instance&gt; entry.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Joint</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">joint</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A joint is a highly specialized kind of grouping node.  A tree of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  joints is used to specify the skeletal structure of an animated</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  character.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A joint may only contain one of three things.  It may contain a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Transform&gt; entry, as above, which defines the joint's unanimated</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  (rest) position; it may contain lists of assigned vertices or CV's;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and it may contain other joints.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A tree of &lt;Joint&gt; nodes only makes sense within a character</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  definition, which is created by applying the &lt;DART&gt; flag to a group.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  See &lt;DART&gt;, above.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15"/></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">The vertex assignment is crucial.  This is how the geometry of a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  character is made to move with the joints.  The character's geometry</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  is actually defined outside the joint tree, and each vertex must be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  assigned to one or more joints within the tree.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This is done with zero or more &lt;VertexRef&gt; entries per joint, as the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  following:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">indices</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">[&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">membership</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">m</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}]</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Ref</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">pool</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This is syntactically similar to the way vertices are assigned to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  polygons.  Each &lt;VertexRef&gt; entry can assign vertices from only one</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertex pool (but there may be many &lt;VertexRef&gt; entries per joint).</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Indices is a list of vertex numbers from the specied vertex pool, in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  an arbitrary order.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The membership scalar is optional.  If specified, it is a value</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  between 0.0 and 1.0 that indicates the fraction of dominance this</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  joint has over the vertices.  This is used to implement</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  soft-skinning, so that each vertex may have partial ownership in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  several joints.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The &lt;VertexRef&gt; entry may also be given to ordinary &lt;Group&gt; nodes.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  In this case, it treats the geometry as if it was parented under the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  group in the first place.  Non-total membership assignments are</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  meaningless.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Bundle</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">list</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">body</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  A table is a set of animated values for joints.  A tree of tables</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  with the same structure as the corresponding tree of joints must be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  defined for each character to be animated.  Such a tree is placed</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  under a &lt;Bundle&gt; node, which provides a handle within Panda to the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  tree as a whole.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Bundles may only contain tables; tables may contain more tables,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  bundles, or any one of the following (&lt;Scalar&gt; entries are optional,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and default as shown):</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">values</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a table of scalar values, one per frame.  This may be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    applied to a morph slider, for instance.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Xfm</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">srpht</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">contents</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">ijkabcrphxyz</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">values</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a table of matrix transforms, one per frame, such as may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    be applied to a joint.  The "contents" string consists of a subset</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    of the letters "ijkabcrphxyz", where each letter corresponds to a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    column of the table; &lt;V&gt; is a list of numbers of length(contents)</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    * num_frames.  Each letter of the contents string corresponds to a</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    type of transformation:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      i, j, k - scale in x, y, z directions, respectively</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      a, b, c - shear in xy, xz, and yz planes, respectively</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      r, p, h - rotate by roll, pitch, heading</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      x, y, z - translate in x, y, z directions</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    The net transformation matrix specified by each row of the table</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is defined as the net effect of each of the individual columns'</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    transform, according to the corresponding letter in the contents</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    string.  The order the transforms are applied is defined by the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    order string:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      s       - all scale and shear transforms</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      r, p, h - individual rotate transforms</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      t       - all translation transforms</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Xfm</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim_S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">srpht</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">i</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">j</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P47"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a variant on the &lt;Xfm$Anim&gt; entry, where each column of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    the table is entered as a separate &lt;S$Anim&gt; table.  This syntax</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    reflects an attempt to simplify the description by not requiring</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    repetition of values for columns that did not change value during</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    an animation sequence.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexAnim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">name</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">width</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">-</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">width</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">values</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    This is a table of vertex positions, normals, texture coordinates,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    or colors.  These values will be subsituted at runtime for the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    corresponding values in a &lt;DynamicVertexPool&gt;.  The name of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    table should be "coords", "norms", "texCoords", or "colors",</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    according to the type of values defined.  The number table-width</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    is the number of floats in each row of the table.  In the case of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    a coords or norms table, this must be 3 times the number of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    vertices in the corresponding dynamic vertex pool.  (For texCoords</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    and colors, this number must be 2 times and 4 times, respectively.)</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"> </p><h3 class="Heading_20_3"><a id="a__MISCELLANEOUS"><span/></a><a name="__RefHeading__7724_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">MISCELLANEOUS</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">File</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">filename</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  This includes a copy of the referenced egg file at the current</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  point.  This is usually placed under an &lt;Instance&gt; node, so that the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  current transform will apply to the geometry in the external file.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The extension ".egg" is implied if it is omitted.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  As with texture filenames, the filename may be a relative path, in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  which case the current egg file's directory is searched first, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  then the model-path is searched.</span></span></p><h3 class="P68"><a id="a__ANIMATION_STRUCTURE"><span/></a><a name="__RefHeading__7726_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T15">ANIMATION STRUCTURE</span></span></h3><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Unanimated models may be defined in egg files without much regard to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  any particular structure, so long as named entries like VertexPools</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and Textures appear before they are referenced.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  However, a certain rigid structural convention must be followed in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  order to properly define an animated skeleton-morph model and its</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  associated animation data.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The structure for an animated model should resemble the following:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">CHARACTER_NAME</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Dart</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Joint</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_A</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Polygon</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Joint</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_B</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Polygon</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Joint</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_C</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Transform</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">VertexRef</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerDirective"><span class="T19">Group</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Polygon</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The &lt;Dart&gt; flag is necessary to indicate that this group begins an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  animated model description.  Without the &lt;Dart&gt; flag, joints will be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  treated as ordinary groups, and morphs will be ignored.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  In the above, UPPERCASE NAMES represent an arbitrary name that you</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  may choose.  The name of the enclosing group, CHARACTER_NAME, is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  taken as the name of the animated model.  It should generally match</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the bundle name in the associated animation tables.</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Within the &lt;Dart&gt; group, you may define an arbitrary hierarchy of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Joint&gt; entries.  There may be as many &lt;Joint&gt; entries as you like,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and they may have any nesting complexity you like.  There may be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  either one root &lt;Joint&gt;, or multiple roots.  However, you must</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  always include at least one &lt;Joint&gt;, even if your animation consists</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  entirely of morphs.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Polygons may be directly attached to joints by enclosing them within</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the &lt;Joint&gt; group, perhaps with additional nesting &lt;Group&gt; entries,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  as illustrated above.  This will result in the polygon's vertices</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  being hard-assigned to the joint it appears within.  Alternatively,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  you declare the polygons elsewhere in the egg file, and use</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;VertexRef&gt; entries within the &lt;Joint&gt; group to associate the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  vertices with the joints.  This is the more common approach, since</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  it allows for soft-assignment of vertices to multiple joints.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  It is not necessary for every joint to have vertices at all.  Every</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  joint should include a transform entry, however, which defines the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  initial, resting transform of the joint (but see also &lt;DefaultPose&gt;,</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  above).  If a transform is omitted, the identity transform is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  assumed.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Some of the vertex definitions may include morph entries, as</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  described in MORPH DESCRIPTION ENTRIES, above.  These are meaningful</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  only for vertices that are assigned, either implicitly or</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  explicitly, to at least one joint.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  You may have multiple versions of a particular animated model--for</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  instance, multiple different LOD's, or multiple different clothing</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  options.  Normally each different version is stored in a different</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  egg file, but it is also possible to include multiple versions</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  within the same egg file.  If the different versions are intended to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  play the same animations, they should all have the same</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  CHARACTER_NAME, and their joint hierarchies should exactly match in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  structure and names.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The structure for an animation table should resemble the following:</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Bundle</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">CHARACTER_NAME</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">"&lt;skeleton&gt;"</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_A</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Xfm</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim_S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">xform</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Char</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">*&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">sphrt</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">10</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">10</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">20</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_B</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Xfm</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim_S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">xform</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Char</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">*&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">sphrt</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">JOINT_C</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Xfm</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim_S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">xform</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Char</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">*&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">order</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">sphrt</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">x</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">y</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">            </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">z</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">          </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Table</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">morph</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">MORPH_A</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0.1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0.2</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">0.3</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">1</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">MORPH_B</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">S</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">$</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Anim</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">MORPH_C</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">Scalar</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">fps</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerLiteral"><span class="T19">24</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">        </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&lt;</span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">V</span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">&gt;</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerIdent"><span class="T19">...</span></span><span class="_5f_OOoComputerKeyWord"><span class="T15"> </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">      </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">    </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  </span></span><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"><span class="_5f_OOoAssemblerSpecialChar"><span class="T19">}</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The &lt;Bundle&gt; entry begins an animation table description.  This</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  entry must have at least one child: a &lt;Table&gt; named "&lt;skeleton&gt;"</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  (this name is a literal keyword and must be present).  The children</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  of this &lt;Table&gt; entry should be a hierarchy of additional &lt;Table&gt;</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  entries, one for each joint in the model.  The joint structure and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  names defined by the &lt;Table&gt; hierarchy should exactly match the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  joint structure and names defined by the &lt;Joint&gt; hierarchy in the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  corresponding model.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Each &lt;Table&gt; that corresponds to a joint should have one child, an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Xfm$Anim_S$&gt; entry named "xform" (this name is a literal keyword</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  and must be present).  Within this entry, there is a series of up to</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  twelve &lt;S$Anim&gt; entries, each with a one-letter name like "x", "y",</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  or "z", which define the per-frame x, y, z position of the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  corresponding joint.  There is one numeric entry for each frame, and</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  all frames represent the same length of time.  You can also define</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  rotation, scale, and shear.  See the full description of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Xfm$Anim_S$&gt;, above.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Within a particular animation bundle, all of the various components</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  throughout the various &lt;Tables&gt; should define the same number of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  frames, with the exception that if any of them define exactly one</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  frame value, that value is understood to be replicated the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  appropriate number of times to match the number of frames defined by</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  other components.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  (Note that you may alternatively define an animation table with an</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Xfm$Anim&gt; entry, which defines all of the individual components in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  one big matrix instead of individually.  See the full description</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  above.)</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Each joint defines its frame rate independently, with an "fps"</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  scalar.  This determines the number of frames per second for the</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  frame data within this table.  Typically, all joints have the same</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  frame rate, but it is possible for different joints to animate at</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  different speeds.</span></span></p><p class="P28"> </p><p class="P47"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Each joint also defines the order in which its components should be</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  composed to determine the complete transform matrix, with an "order"</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  scalar.  This is described in more detail above.</span></span></p><p class="P28"> </p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  If any of the vertices in the model have morphs, the top-level</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;Table&gt; should also include a &lt;Table&gt; named "morph" (this name is</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  also a literal keyword).  This table in turn contains a list of</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  &lt;S$Anim&gt; entries, one for each named morph description.  Each table</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  contains a list of numeric values, one per frame; as with the joint</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  data, there should be the same number of numeric values in all</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  tables, with the exception that just one value is understood to mean</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  hold that value through the entire animation.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The "morph" table may be omitted if there are no morphs defined in</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  the model.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  There should be a separate &lt;Bundle&gt; definition for each different</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  animation.  The &lt;Bundle&gt; name should match the CHARACTER_NAME used</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  for the model, above.  Typically each bundle is stored in a separate</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  egg file, but it is also possible to store multiple different</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  animation bundles within the same egg file.  If you do this, you may</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  violate the CHARACTER_NAME rule, and give each bundle a different</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  name; this will become the name of the animation in the Actor</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  interface.</span></span></p><p class="P28"> </p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  Although animations and models are typically stored in separate egg</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  files, it is possible to store them together in one large egg file.</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  The Actor interface will then make available all of the animations</span></span></p><p class="P28"><span class="_5f_OOoComputerKeyWord"><span class="T15">  it finds within the egg file, by bundle name.</span></span></p><p class="P28"> </p><h2 class="P62"><a id="a__HOW_TO_CONTROL_RENDER_ORDER"><span/></a><a name="__RefHeading__7731_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">HOW TO CONTROL RENDER ORDER</span></span></h2><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17"/></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">In most simple scenes, you can naively attach geometry to the scene</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">graph and let Panda decide the order in which objects should be</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">rendered.  Generally, it will do a good enough job, but there are</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">occasions in which it is necessary to step in and take control of the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">process.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">To do this well, you need to understand the implications of render</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">order.  In a typical OpenGL- or DirectX-style Z-buffered system, the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">order in which primitives are sent to the graphics hardware is</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">theoretically unimportant, but in practice there are many important</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">reasons for rendering one object before another.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Firstly, state sorting is one important optimization.  This means</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">choosing to render things that have similar state (texture, color,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">etc.) all at the same time, to minimize the number of times the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">graphics hardware has to be told to change state in a particular</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">frame.  This sort of optimization is particularly important for very</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">high-end graphics hardware, which achieves its advertised theoretical</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">polygon throughput only in the absence of any state changes; for many</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">such advanced cards, each state change request will completely flush</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the register cache and force a restart of the pipeline.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Secondly, some hardware has a different optimization requirement, and</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">may benefit from drawing nearer things before farther things, so that</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the Z-buffer algorithm can effectively short-circuit some of the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">advanced shading features in the graphics card for pixels that would</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">be obscured anyway.  This sort of hardware will draw things fastest</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">when the scene is sorted in order from the nearest object to the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">farthest object, or "front-to-back" ordering.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Finally, regardless of the rendering optimizations described above, a</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">particular sorting order is required to render transparency properly</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(in the absence of the specialized transparency support that only a</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">few graphics cards provide).  Transparent and semitransparent objects</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">are normally rendered by blending their semitransparent parts with</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17">what has already been drawn to the framebuffer, which means that it is</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">important that everything that will appear behind a semitransparent</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">object must have already been drawn before the semitransparent parts</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">of the occluding object is drawn.  This implies that all</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">semitransparent objects must be drawn in order from farthest away to</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">nearest, or in "back-to-front" ordering, and furthermore that the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">opaque objects should all be drawn before any of the semitransparent</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">objects.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Panda achieves these sometimes conflicting sorting requirements</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">through the use of bins.</span></span></p><h3 class="Heading_20_3"><a id="a__CULL_BINS"><span/></a><a name="__RefHeading__7733_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">CULL BINS</span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">The CullBinManager is a global object that maintains a list of all of</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the cull bins in the world, and their properties.  Initially, there</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">are five default bins, and they will be rendered in the following</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">order:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Bin Name        Sort  Type</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    --------------  ----  ----------------</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    "background"     10   BT_fixed</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    "opaque"         20   BT_state_sorted</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    "transparent"    30   BT_back_to_front</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    "fixed"          40   BT_fixed</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    "unsorted"       50   BT_unsorted</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">When Panda traverses the scene graph each frame for rendering, it</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">assigns each Geom it encounters into one of the bins defined in the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">CullBinManager.  (The above lists only the default bins.  Additional</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">bins may be created as needed, using either the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">CullBinManager::add_bin() method, or the Config.prc "cull-bin"</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">variable.)</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">You may assign a node or nodes to an explicit bin using the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">NodePath::set_bin() interface.  set_bin() requires two parameters, the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">bin name and an integer sort parameter; the sort parameter is only</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">meaningful if the bin type is BT_fixed (more on this below), but it</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">must always be specified regardless.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">If a node is not explicitly assigned to a particular bin, then Panda</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">will assign it into either the "opaque" or the "transparent" bin,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">according to whether it has transparency enabled or not.  (Note that</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17">the reverse is not true: explicitly assigning an object into the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">"transparent" bin does not automatically enable transparency for the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">object.)</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">When the entire scene has been traversed and all objects have been</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">assigned to bins, then the bins are rendered in order according to</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">their sort parameter.  Within each bin, the contents are sorted</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">according to the bin type.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">The following bin types may be specified:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">  BT_fixed</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Render all of the objects in the bin in a fixed order specified by</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    the user.  This is according to the second parameter of the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    NodePath::set_bin() method; objects with a lower value are drawn</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    first.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">  BT_state_sorted</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Collects together objects that share similar state and renders</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    them together, in an attempt to minimize state transitions in the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    scene.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">  BT_back_to_front</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Sorts each Geom according to the center of its bounding volume, in</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    linear distance from the camera plane, so that farther objects are</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    drawn first.  That is, in Panda's default right-handed Z-up</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    coordinate system, objects with large positive Y are drawn before</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    objects with smaller positive Y.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">  BT_front_to_back</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    The reverse of back_to_front, this sorts so that nearer objects</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    are drawn first.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">  BT_unsorted</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Objects are drawn in the order in which they appear in the scene</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    graph, in a depth-first traversal from top to bottom and then from</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    left to right.</span></span></p><h2 class="P62"><a id="a__How_to_make_multipart_actor"><span/></a><a name="__RefHeading__7897_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">How to make multipart actor</span></span></h2><h3 class="Heading_20_3"><a id="a__MULTIPART_ACTORS_vs__HALF-BODY_ANIMATION"><span/></a><a name="__RefHeading__7899_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">MULTIPART ACTORS vs. HALF-BODY ANIMATION</span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Sometimes you want to be able to play two different animations on the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">same Actor at once.  Panda does have support for blending two</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">animations on the whole Actor simultaneously, but what if you want to</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">play one animation (say, a walk cycle) on the legs while a completely</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">different animation (say, a shoot animation) is playing on the torso?</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Although Panda doesn't currently have support for playing two</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">different animations on different parts of the same actor at once</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(half-body animation), it does support loading up two completely</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">different models into one actor (multipart actors), which can be used</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">to achieve the same effect, albeit with a bit more setup effort.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Multipart actors are more powerful than half-body animations, since</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">you can completely mix-and-match the pieces with parts from other</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">characters: for instance, you can swap out short legs for long legs to</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">make your character taller.  On the other hand, multipart actors are</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">also more limited in that there cannot be any polygons that straddle</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the connecting joint between the two parts.</span></span></p><p class="P31"> </p><p class="P31"> </p><h3 class="Heading_20_3"><a id="a__BROAD_OVERVIEW"><span/></a><a name="__RefHeading__7901_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">BROAD OVERVIEW</span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">What you have to do is split your character into two completely</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">different models: the legs and the torso.  You don't have to do this</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">in the modeling package; you should be able to do it in the conversion</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">process.  The converter needs to be told to get out the entire</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">skeleton, but just a subset of the geometry.  Maya2egg, for instance,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">will do this with the -subset command-line parameter.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Then, in a nutshell, you load up a multipart actor with the legs and</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the torso as separate parts, and you can play the same animation on</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">both parts, or you can use the per-part interface to play a different</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">animation on each part.</span></span></p><p class="P31"> </p><h3 class="P68"><a id="a__MORE_DETAILS"><span/></a><a name="__RefHeading__7903_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">MORE DETAILS</span></span></h3><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">That nutshell oversimplifies things only a little bit.  Unless your</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">different animations are very similar to each other, you will have</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">issues keeping the different parts from animating in different</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">directions.  To solve this, you need to parent them together properly,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">so that the torso is parented to the hips.  This means exposing the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">hip joint in the legs model, and subtracting the hip joint animation</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">from the torso model using egg-topstrip (because it will pick it up</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">again when it gets stacked up on the hips).  Also, you should strongly</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">consider egg-optchar to remove the unused joints from each part's</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">skeleton, although this step is just an optimization.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">Unfortunately, all this only works if your character has no polygons</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">that straddle the connecting joint between the hips and the torso.  If</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">it does, you may have to find a clever place to draw the line between</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">them (under a shirt?) so that the pieces can animate in different</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">directions without visible artifacts.  If that can't be done, then the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">only solution is to add true half-body animation support to Panda. :)</span></span></p><p class="P31"> </p><h3 class="Heading_20_3"><a id="a__NUTS_AND_BOLTS"><span/></a><a name="__RefHeading__7905_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">NUTS AND BOLTS</span></span></h3><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">You need to parent the two parts together in Panda.  The complete</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">process is this (of course, you'll need to flesh out the details of</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the maya2egg command line according to the needs of your model, and</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">insert your own filenames and joint names where appropriate):</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(1) Extract out the model into two separate files, legs and torso.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Extract the animation out twice too, even though both copies will</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    be the same, just so it can conveniently exist in two different</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    egg files, one for the legs and one for the torso.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   maya2egg -subset legs_group -a model -cn legs -o legs-model.egg myFile.mb</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   maya2egg -a chan -cn legs -o legs-walk.egg myFile.mb</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   maya2egg -subset torso_group -a model -cn torso -o torso-model.egg myFile.mb</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   maya2egg -a chan -cn torso -o torso-walk.egg myFile.mb</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    Note that I use the -cn option to give the legs and torso pieces</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    different character names.  It helps out Panda to know which</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    animations are intended to be played with which models, and the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    character name serves this purpose--this way I can now just type:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   pview legs-model.egg legs-walk.egg torso-model.egg torso-walk.eggPanda will bind up the</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17"> appropriate animations to their associated</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    models automatically, and I should see my character walking</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    normally.  We could skip straight to step (5) now, but the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    character isn't stacked up yet, and he's only sticking together</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    now because we're playing the walk animation on both parts at the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    same time--if we want to play different animations on different</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    parts, we have to stack them.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(2) Expose the hip joint on the legs:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg-optchar -d opt -expose hip_joint legs-model.egg legs-walk.egg</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(3) Strip out the hip joint animation from the torso and egg-optchar</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    it to remove the leg joints:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg-topstrip -d strip -t hip_joint torso-model.egg torso-walk.egg</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg-optchar -d opt strip/torso-model.egg strip/torso-walk.egg</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(4) Bamify everything.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg2bam -o legs-model.bam opt/legs-model.egg</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg2bam -o legs-walk.bam opt/legs-walk.egg</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg2bam -o torso-model.bam opt/torso-model.egg</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   egg2bam -o torso-walk.bam opt/torso-walk.egg</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(5) Create a multipart character in Panda.  This means loading up the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    torso model and parenting it, in toto, to the hip joint of the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">    legs.  But the Actor interface handles this for you:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerKeyWord"><span class="T20">from</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerIdent"><span class="T20">direct</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">actor</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerKeyWord"><span class="T20">import</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerIdent"><span class="T20">Actor</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerIdent"><span class="T20">a</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">=</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerIdent"><span class="T20">Actor</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">Actor</span></span><span class="_5f_OOoComputerBase"><span class="T20">(</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerComment"><span class="T20"># part dictionary</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerBase"><span class="T20">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'torso'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'torso-model.bam'</span></span><span class="_5f_OOoComputerBase"><span class="T20">,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">       </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs-model.bam'</span></span><span class="_5f_OOoComputerBase"><span class="T20">,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerBase"><span class="T20">},</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerComment"><span class="T20"># anim dictionary</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerBase"><span class="T20">{</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'torso'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">{</span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'walk'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'torso-walk.bam'</span></span><span class="_5f_OOoComputerBase"><span class="T20">},</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">       </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">{</span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'walk'</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">:</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs-walk.bam'</span></span><span class="_5f_OOoComputerBase"><span class="T20">},</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">     </span></span><span class="_5f_OOoComputerBase"><span class="T20">})</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerComment"><span class="T20"># Tell the Actor how to stack the pieces.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerIdent"><span class="T20">a</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">attach</span></span><span class="_5f_OOoComputerBase"><span class="T20">(</span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'torso'</span></span><span class="_5f_OOoComputerBase"><span class="T20">,</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs'</span></span><span class="_5f_OOoComputerBase"><span class="T20">,</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'hip_joint'</span></span><span class="_5f_OOoComputerBase"><span class="T20">)</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">(6) You can now play animations on the whole actor, or on only part of it:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerIdent"><span class="T20">a</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">loop</span></span><span class="_5f_OOoComputerBase"><span class="T20">(</span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'walk'</span></span><span class="_5f_OOoComputerBase"><span class="T20">)</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerIdent"><span class="T20">a</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">stop</span></span><span class="_5f_OOoComputerBase"><span class="T20">()</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   </span></span><span class="_5f_OOoComputerIdent"><span class="T20">a</span></span><span class="_5f_OOoComputerBase"><span class="T20">.</span></span><span class="_5f_OOoComputerIdent"><span class="T20">loop</span></span><span class="_5f_OOoComputerBase"><span class="T20">(</span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'walk'</span></span><span class="_5f_OOoComputerBase"><span class="T20">,</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerIdent"><span class="T20">partName</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerBase"><span class="T20">=</span></span><span class="_5f_OOoComputerKeyWord"><span class="T17"> </span></span><span class="_5f_OOoComputerLiteral"><span class="T20">'legs'</span></span><span class="_5f_OOoComputerBase"><span class="T20">)</span></span></p><p class="P31"> </p><h2 class="P62"><a id="a__MULTIGEN_MODEL_FLAGS"><span/></a><a name="__RefHeading__7908_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">MULTIGEN MODEL FLAGS</span></span></h2><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">This document describes the different kinds of model flags one can place in</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">the comment field of MultiGen group beads.  The general format for a model</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">flag is: </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                       &lt;egg&gt; { &lt;FLAGNAME&gt; {value} }</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">The most up-to-date version of this document can be found in:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                   $PANDA/src/doc/howto.MultiGenModelFlags</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="Contents_20_1"><a name="__RefHeading__7910_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">                                 QUICKREF</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">            FLAG                                DESCRIPTION</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">-------------------------------     ----------------------------------------</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Model&gt;      {1} }          Handle to show/hide, color, etc. a chunk</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;DCS&gt;        {1} }          Handle to move, rotate, scale a chunk</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {barrier} }    Invisible collision surface</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {trigger} }    Invisible trigger polygon</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {floor} }      Collides with vertical ray</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                                    (used to specify avatar height and zone)</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {sphere} }              Invisible sphere collision surface</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {trigger-sphere} }      Invisible sphere collision surface</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {camera-collide} }              Invisible collision surface for camera</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {camera-collide-sphere} }       Invisible collision surface for camera</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {camera-barrier} }      Invisible collision surface for camera and colliders</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {camera-barrier-sphere} }     Invisible sphere collision surface for camera and colliders</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {backstage} }  Modeling reference object</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Decal&gt;      {1} }          Decal the node below to me </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                                    (like a window on a wall)</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Scalar&gt; fps { # } }        Set rate of animation for a pfSequence</span></span></p><p class="P31"> </p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="Contents_20_1"><a name="__RefHeading__7912_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">                                  DETAILS</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17">The player uses several different types of model flags: HANDLES, BEHAVIORS,</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">and PROPERTIES.  The following sections give examples of some of the most</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">common flag/value pairs and describes what they are used for.</span></span></p><h3 class="Heading_20_3"><a id="a__HANDLES"><span/></a><a name="__RefHeading__7914_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">HANDLES </span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   These flags give the programmers handles which they can use to</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   show/hide, move around, control the texture, etc. of selected segments</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   (chunks) of the model.  The handle is the name of the object bead in</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   which one places the flag (so names like red-hut are more useful than</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   names like o34).</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Model&gt; {1} }   </span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Used to show/hide, change the color, or change the collision properties </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   of a chunk.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;DCS&gt; {1} }     </span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Used to move, rotate, or scale a chunk of the model.  Also can be used</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   (like the &lt;Model&gt; flag) to show/hide, change the color, and change the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   collision properties of a chunk.</span></span></p><p class="P31"> </p><p class="P31"> </p><h3 class="Heading_20_3"><a id="a__BEHAVIORS"><span/></a><a name="__RefHeading__7916_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">BEHAVIORS</span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   These flags are used to control collision properties, visibility and</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   behavior of selected chunks.  An "X" in the associated column means:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      VISIBLE  the object can be seen (see NOTE below for invisible objects)</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      SOLID    avatars can not pass through the object</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      EVENT    an event is thrown whenever an avatar collides with the object</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                                       VISIBLE      SOLID       EVENT</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">                                       -------     -------     -------</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {barrier} }                      X           X</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {trigger} }                                  X</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;ObjectType&gt; {backstage} }</span></span></p><p class="P31"> </p><p class="P50"> </p><p class="Contents_20_1"><a name="__RefHeading__7918_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">   Descriptions</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      -  BARRIERS are invisible objects that block the avatars.  Use these</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         to funnel avatars through doorways, keep them from falling off</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         bridges, and so on.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      -  TRIGGERS can be used to signal when avatars have entered a certain</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         area of the model.  One could place a trigger polygon in front of</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         a door, for example, so the player can tell when the avatar has</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         moved through the door.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">      -  BACKSTAGE objects are not translated over to the player.  Modelers</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         should use this flag on reference objects that they include to help </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         in the modeling task (such as scale references)</span></span></p><p class="P31"> </p><p class="Contents_20_1"><a name="__RefHeading__7920_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">   IMPORTANT NOTE</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   It is not necessary, and in fact some cases it will actually cause</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   problems if you set the transparency value for the invisible objects</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   above (barrier, trigger, eye-trigger) to 0.0.  These objects will</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   automatically be invisible in the player if they have been flagged as</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   one of these three invisible types.  If you wish to make it clear in</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   MultiGen that these objects are invisible objects, set the transparency</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   value to some intermediate level (0.5).  Again, do not set the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   transparency value to 0.0.</span></span></p><h3 class="Heading_20_3"><a id="a__PROPERTIES"><span/></a><a name="__RefHeading__7922_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17"> PROPERTIES </span></span></h3><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">These are used to control properties of selected chunks. </span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Scalar&gt; fps { frame-rate } }</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   This specifies the rate of animation for a pfSequence node</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="Contents_20_1"><a name="__RefHeading__7924_869075401"/><span class="_5f_OOoComputerKeyWord"><span class="T17">                                   NOTES</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">***************************************************************************</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">1) Combinations</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Multiple Flag/value pairs can be combined within an single &lt;egg&gt; field.</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   For example:</span></span></p><p class="P50"><span class="_5f_OOoComputerKeyWord"><span class="T17">&lt;egg&gt; { &lt;Model&gt; {1}  </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">           &lt;ObjectType&gt; {barrier} }</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Generally, the &lt;Model&gt; flag can be combined with most other flags</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   (except DCS).  Each bead, however, can only have *one* &lt;ObjectType&gt; flag.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">2) Newlines, spaces, and case (usually) do not matter.  This above entry</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   could also be written as:</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   &lt;egg&gt;{&lt;model&gt;{1}&lt;objecttype&gt;{barrier}}</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         </span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">3) Where to place the flags</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   All model flags except &lt;Normal&gt; flags are generally placed in the</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   topmost group bead of the geometry to which the flag applies.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">         GROUP  &lt;- place flags here, except &lt;Normal&gt;</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">           |</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">           ---------------------------</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">           |            |            |</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">        OBJECT1      OBJECT2      OBJECT3 .....</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">           |            |            |</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">        polygons     polygons     polygons  &lt;- place &lt;Normal&gt; flag here</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Flags can also be placed in object beads, though for consistency sake</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   its better to place them in the group beads.</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">4) Flags at different levels in the model</span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   Flags in lower level beads generally override flags in upper level</span></span></p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">   beads. </span></span></p><p class="P31"> </p><p class="P31"><span class="_5f_OOoComputerKeyWord"><span class="T17">5) For more detailed information see </span></span><a href="#__RefHeading__7670_869075401" class="Index_20_Link"><span class="_5f_OOoComputerKeyWord"><span class="T17">THE PHILOSOPHY OF EGG FILES</span></span></a><span class="_5f_OOoComputerKeyWord"><span class="T17"> in Part 2 of this manual or refer to source in  $PANDA/src/doc/eggSyntax.txt.</span></span></p><h2 class="P62"><a id="a__Multi-Texturing_in_Maya"><span/></a><a name="__RefHeading__31226_1927442421"/>Multi-Texturing in Maya</h2><p class="P32"> </p><p class="P32">A good rule of thumb is to create your Multi-Layered shader first to get an idea of what kind of blendmode you want. You can do that by using Maya's kLayeredShader.</p><p class="P32"> </p><p class="P32">Following blendmode from Maya is supported directly in Panda.</p><p class="P32"> </p><p class="P32">"Multiply" =&gt; "Modulate"</p><p class="P32">"Over" =&gt; "Decal"</p><p class="P32">"Add" =&gt; "Add"</p><p class="P32"> </p><p class="P32">More blendmodes will be supported very soon. You should be able to pview this change if you restart Maya from the "runmaya.bat" (or however you restart maya).</p><p class="P32"> </p><p class="P32">Once the shader is setup, you should create the texture coordinates or uvsets for your multitexture. Make sure, the uvset name matches the shader names that you made</p><p class="P32">in the kLayeredShader. For Example, if the two shaders (not the texure file name) in your kLayeredShader are called "base" and "top", then your geometry (that will have</p><p class="P32">the layeresShader) will have two uvsets called "base" and "top".</p><p class="P32"> </p><p class="P32">After this you will link the uvsets to the appropriate shaders.</p><p class="P32"> </p><p class="P32">A reminder note: by default the alpha channel of the texture on the bottom is dropped in the conversion. If you want to retain the alpha channel of your texture, </p><p class="P32">please make a connection to the alpha channel in Maya when setting up the shader (alpha on the layerShader will be highlighted in yellow).</p><p class="P32"> </p><h2 class="P62"><a id="a__Config"><span/></a><a name="__RefHeading__31228_1927442421"/>Config</h2><p class="P33">This document describes the use of the Panda's Config.prc</p><p class="P33">configuration files and the runtime subsystem that extracts values</p><p class="P33">from these files, defined in dtool/src/prc.</p><p class="P33"> </p><p class="P33">The Config.prc files are used for runtime configuration only, and are</p><p class="P33">not related to the Config.pp files, which control compile-time</p><p class="P33">configuration.  If you are looking for documentation on the Config.pp</p><p class="P33">files, see howto.use_ppremake.txt, and ppremake-*.txt, in this</p><p class="P33">directory.</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__USING_THE_PRC_FILES"><span/></a><a name="__RefHeading__31230_1927442421"/>USING THE PRC FILES</h3><p class="P33"> </p><p class="P33">In its default mode, when Panda starts up it will search in the</p><p class="P33">install/etc directory (or in the directory named by the environment</p><p class="P33">variable PRC_DIR if it is set) for all files named *.prc (that is, any</p><p class="P33">files with an extension of "prc") and read each of them for runtime</p><p class="P33">configuration.  (It is possible to change this default behavior; see</p><p class="P33">COMPILE-TIME OPTIONS FOR FINDING PRC FILES, below.)</p><p class="P33"> </p><p class="P33">All of the prc files are loaded in alphabetical order, so that the</p><p class="P33">files that have alphabetically later names are loaded last.  Since</p><p class="P33">variables defined in an later file may shadow variables defined in an</p><p class="P33">earlier file, this means that filenames towards the end of the</p><p class="P33">alphabet have the most precedence.</p><p class="P33"> </p><p class="P33">Panda by default installs a handful of system prc files into the</p><p class="P33">install/etc directory.  These files have names beginning with digits,</p><p class="P33">like 20_panda.prc and 40_direct.prc, so that they will be loaded in a</p><p class="P33">particular order.  If you create your own prc file in this directory,</p><p class="P33">we recommend that you begin its filename with letters, so that it will</p><p class="P33">sort to the bottom of the list and will therefore override any of the</p><p class="P33">default variables defined in the system prc files.</p><p class="P33"> </p><p class="P33"> </p><p class="P33">Within a particular prc file, you may define any number of</p><p class="P33">configuration variables and their associated value.  Each definition</p><p class="P33">must appear one per line, with at least one space separating the</p><p class="P51">variable and its definition, e.g.:</p><p class="P33"> </p><p class="P33">load-display pandagl</p><p class="P33"> </p><p class="P33">This specifies that the variable "load-display" should have the value</p><p class="P33">"pandagl".</p><p class="P33"> </p><p class="P33">Comments may also appear in the file; they are introduced by a leading</p><p class="P33">hash mark (#).  A comment may be on a line by itself, or it may be on</p><p class="P33">the same line following a variable definition; if it is on the same</p><p class="P33">line as a variable definition, the hash mark must be preceded by at</p><p class="P33">least one space to separate it from the definition.</p><p class="P33"> </p><p class="P33"> </p><p class="P33">The legal values that you may specify for any particular variable</p><p class="P33">depends on the variable.  The complete list of available variables and</p><p class="P33">the valid values for each is not documented here (a list of the most</p><p class="P33">commonly modified variables appears in another document, but also see</p><p class="P33">cvMgr.listVariables(), below).</p><p class="P33"> </p><p class="P33">Many variables accept any string value (such as load-display, above);</p><p class="P33">many others, such as aspect-ratio, expect a numeric value.</p><p class="P33"> </p><p class="P33">A large number of variables expect a simple boolean true/false value.</p><p class="P33">You may observe the Python convention of using 0 vs. 1 to represent</p><p class="P33">false vs. true; or you may literally type "false" or "true", or just</p><p class="P33">"f" and "t".  For historical reasons, Panda also recognizes the Scheme</p><p class="P33">convention of "#f" and "#t".</p><p class="P33"> </p><p class="P33"> </p><p class="P33">Most variables only accept one value at a time.  If there are two</p><p class="P33">different definitions for a given variable in the same file, the</p><p class="P33">topmost definition applies.  If there are two different definitions in</p><p class="P33">two different files, the definition given in the file loaded later</p><p class="P33">applies.</p><p class="P33"> </p><p class="P33">However, some variables accept multiple values.  This is particularly</p><p class="P33">common for variables that name search directories, like model-path.</p><p class="P33">In the case of this kind of variable, all definitions given for the</p><p class="P33">variable are taken together; it is possible to extend the definition</p><p class="P33">by adding another prc file, but you cannot remove any value defined in</p><p class="P33">a previously-loaded prc file.</p><p class="P51"> </p><h3 class="Heading_20_3"><a id="a__DEFINING_CONFIG_VARIABLES"><span/></a><a name="__RefHeading__31232_1927442421"/>DEFINING CONFIG VARIABLES</h3><p class="P33"> </p><p class="P33">New config variables may be defined on-the-fly in either C++ or Python</p><p class="P33">code.  To do this, create an instance of one of the following classes:</p><p class="P33"> </p><p class="P33">ConfigVariableString</p><p class="P33">ConfigVariableBool</p><p class="P33">ConfigVariableInt</p><p class="P33">ConfigVariableDouble</p><p class="P33">ConfigVariableFilename</p><p class="P33">ConfigVariableEnum (C++ only)</p><p class="P33">ConfigVariableList</p><p class="P33">ConfigVariableSearchPath</p><p class="P33"> </p><p class="P33">These each define a config variable of the corresponding type.  For</p><p class="P33">instance, a ConfigVariableInt defines a variable whose value must</p><p class="P33">always be an integer value.  The most common variable types are the</p><p class="P33">top four, which are self-explanatory; the remaining four are special</p><p class="P33">types:</p><p class="P33"> </p><p class="P33">ConfigVariableFilename -</p><p class="P33"> </p><p class="P33">  This is a convenience class which behaves very much like a</p><p class="P33">  ConfigVariableString, except that it automatically converts from</p><p class="P33">  OS-specific filenames that may be given in the prc file to</p><p class="P33">  Panda-specific filenames, and it also automatically expands</p><p class="P33">  environment variable references, so that the user may name a file</p><p class="P33">  based on the value of an environment variable</p><p class="P33">  (e.g. $PANDAMODELS/file.egg).</p><p class="P33"> </p><p class="P33">ConfigVariableEnum -</p><p class="P33"> </p><p class="P33">  This is a special template class available in C++ only.  It provides</p><p class="P33">  a convenient way to define a variable that may accept any of a</p><p class="P33">  handful of different values, each of which is defined by a keyword.</p><p class="P33">  For instance, the text-encoding variable may be set to any of</p><p class="P33">  "iso8859", "utf8", or "unicode", which correspond to</p><p class="P33">  TextEncoder::E_iso8859, E_utf8, and E_unicode, respectively.</p><p class="P33"> </p><p class="P33">  The ConfigVariableEnum class relies on a having sensible pair of</p><p class="P51">  functions defined for operator &lt;&lt; (ostream) and operator &gt;&gt;(istream)</p><p class="P33"> for the enumerated type.  These two functions should</p><p class="P33">  reverse each other, so that the output operator generates a keyword</p><p class="P33">  for each value of the enumerated type, and the input operator</p><p class="P33">  recognizes each of the keywords generated by the output operator.</p><p class="P33"> </p><p class="P33">  This is a template class.  It is templated on its enumerated type,</p><p class="P33">  e.g. ConfigVariableEnum&lt;TextEncoder::Encoding&gt;.</p><p class="P33"> </p><p class="P33">ConfigVariableList -</p><p class="P33"> </p><p class="P33">  This class defines a special config variable that records all of its</p><p class="P33">  definitions appearing in all prc files and retrieves them as a list,</p><p class="P33">  instead of a standard config variable that returns only the topmost</p><p class="P33">  definition.  (See "some variables accept multiple values", above.)</p><p class="P33"> </p><p class="P33">  Unlike the other kinds of config variables, a ConfigVariableList is</p><p class="P33">  read-only; it can be modified only by loading additional prc files,</p><p class="P33">  rather than directly setting its value.  Also, its constructor lacks</p><p class="P33">  a default_value parameter, since there is no default value (if the</p><p class="P33">  variable is not defined in any prc file, it simply returns an empty</p><p class="P33">  list).</p><p class="P33"> </p><p class="P33">ConfigVariableSearchPath -</p><p class="P33"> </p><p class="P33">  This class is very similar to a ConfigVariableList, above, except</p><p class="P33">  that it is intended specifically to represent the multiple</p><p class="P33">  directories of a search path.  In general, a</p><p class="P33">  ConfigVariableSearchPath variable can be used in place of a</p><p class="P33">  DSearchPath variable.</p><p class="P33"> </p><p class="P33">  Unlike ConfigVariableList, instances of this variable can be locally</p><p class="P33">  modified by appending or prepending additional directory names.</p><p class="P33"> </p><p class="P33"> </p><p class="P33">In general, each of the constructors to the above classes accepts the</p><p class="P33">following parameters:</p><p class="P33"> </p><p class="P33">(name, default_value, description = "", flags = 0)</p><p class="P33"> </p><p class="P33">The default_value parameter should be of the same type as the variable</p><p class="P33">itself; for instance, the default_value for a ConfigVariableBool must</p><p class="P51"> </p><p class="P33">be either true or false.  The ConfigVariableList and ConfigVariableSearchPath constructors do not have a default_value</p><p class="P33">parameter.</p><p class="P33"> </p><p class="P33">The description should be a sentence or two describing the purpose of</p><p class="P33">the variable and the effects of setting it.  It will be reported with</p><p class="P33">variable.getDescription() or ConfigVariableManager.listVariables();</p><p class="P33">see QUERYING CONFIG VARIABLES, below.</p><p class="P33"> </p><p class="P33">The flags variable is usually set to 0, but it may be an integer trust</p><p class="P33">level and/or the union of any of the values in the enumerated type</p><p class="P33">ConfigFlags::VariableFlags.  For the most part, this is used to</p><p class="P33">restrict the variable from being set by unsigned prc files.  See</p><p class="P33">SIGNED PRC FILES, below.</p><p class="P33"> </p><p class="P33">Once you have created a config variable of the appropriate type, you</p><p class="P33">may generally treat it directly as a simple variable of that type.</p><p class="P33">This works in both C++ and in Python.  For instance, you may write</p><p class="P33">code such as this:</p><p class="P33"> </p><p class="P33">ConfigVariableInt foo_level("foo-level", -1, "The level of foo");</p><p class="P33"> </p><p class="P33">if (foo_level &lt; 0) {</p><p class="P33">  cerr &lt;&lt; "You didn't specify a valid foo_level!\n";</p><p class="P33"> </p><p class="P33">} else {</p><p class="P33">  // Four snarfs for every foo.</p><p class="P33">  int snarf_level = 4 * foo_level;</p><p class="P33">}</p><p class="P33"> </p><p class="P33">In rare cases, you may find that the implicit typecast operators</p><p class="P33">aren't resolved properly by the compiler; if this happens, you can use</p><p class="P33">variable.get_value() to retrieve the variable's value explicitly.</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__DIRECTLY_ASSIGNING_CONFIG_VARIABLES"><span/></a><a name="__RefHeading__31234_1927442421"/>DIRECTLY ASSIGNING CONFIG VARIABLES</h3><p class="P33"> </p><p class="P33">In general, config variables can be directly assigned values</p><p class="P33">appropriate to their type, as if they were ordinary variables.  In</p><p class="P33">C++, the assignment operator is overloaded to perform this function,</p><p class="P51"> </p><p class="P33">e.g.:</p><p class="P33"> foo_level = 5;</p><p class="P33">In Python, this syntax is not possible--the assignment operator in</p><p class="P33">Python completely replaces the value of the assigned symbol and cannot</p><p class="P33">be overloaded.  So the above statement in Python would replace</p><p class="P33">foo_level with an actual integer of the value 5.  In many cases, this</p><p class="P33">is close enough to what you intended anyway, but if you want to keep</p><p class="P33">the original functionality of the config variable (e.g. so you can</p><p class="P33">restore it to its original value later), you need to use the</p><p class="P33">set_value() method instead, like this:</p><p class="P33"> </p><p class="P33">  fooLevel.setValue(5)</p><p class="P33"> </p><p class="P33">When you assign a variable locally, the new definition shadows all prc</p><p class="P33">files that have been read or will ever be read, until you clear your</p><p class="P33">definition.  To restore a variable to its original value as defined by</p><p class="P33">the topmost prc file, use clear_local_value():</p><p class="P33"> </p><p class="P33">  fooLevel.clearLocalValue()</p><p class="P33"> </p><p class="P33">This interface for assigning config variables is primarily intended</p><p class="P33">for the convenience of developing an application interactively; it is</p><p class="P33">sometimes useful to change the value of a variable on the fly.</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__QUERYING_CONFIG_VARIABLES"><span/></a><a name="__RefHeading__31236_1927442421"/>QUERYING CONFIG VARIABLES</h3><p class="P33"> </p><p class="P33">There are several mechanisms for finding out the values of individual</p><p class="P33">config variables, as well as for finding the complete list of</p><p class="P33">available config variables.</p><p class="P33"> </p><p class="P33">In particular, one easy way to query an existing config variable's</p><p class="P33">value is simply to create a new instance of that variable, e.g.:</p><p class="P33"> </p><p class="P33">  print ConfigVariableInt("foo-level")</p><p class="P33"> </p><p class="P33">The default value and comment are optional if another instance of the</p><p class="P33">same config variable has previously been created, supplying these</p><p class="P33">parameters.  However, it is an error if no instance of a particular</p><p class="P33">config variable specifies a default value.  It is also an error (but</p><p class="P51"> </p><p class="P33">it is treated as a warning) if two different instances of a variable</p><p class="P33">specify different default values.</p><p class="P33">(Note that, although it is convenient to create a new instance of the</p><p class="P33">variable in order to query or modify its value interactively, we</p><p class="P33">recommend that all the references to a particular variable in code</p><p class="P33">should use the same instance wherever possible.  This minimizes the</p><p class="P33">potential confusion about which instance should define the variable's</p><p class="P33">default value and/or description, and reduces chance of conflicts</p><p class="P33">should two such instances differ.)</p><p class="P33"> </p><p class="P33">If you don't know the type of the variable, you can also simply create</p><p class="P33">an instance of the generic ConfigVariable class, for the purpose of</p><p class="P33">querying an existing variable only (you should not define a new</p><p class="P33">variable using the generic class).</p><p class="P33"> </p><p class="P33">To find out more detail about a variable and its value, use the ls()</p><p class="P33">method in Python (or the write() method in C++), e.g.:</p><p class="P33"> </p><p class="P33">  ConfigVariable("foo-level").ls()</p><p class="P33"> </p><p class="P33">In addition to the variable's current and default values, this also</p><p class="P33">prints a list of all of the prc files that contributed to the value of</p><p class="P33">the variable, as well as the description provided for the variable.</p><p class="P33"> </p><p class="P33">To get a list of all known config variables, use the methods on</p><p class="P33">ConfigVariableManager.  In C++, you can get a pointer this object via</p><p class="P33">ConfigVariableManager::get_global_ptr(); in Python, use the cvMgr</p><p class="P33">builtin, created by ShowBase.py.</p><p class="P33"> </p><p class="P33">  print cvMgr</p><p class="P33"> </p><p class="P33">    Lists all of the variables in active use: all of the variables</p><p class="P33">    whose value has been set by one or more prc files, along with the</p><p class="P33">    name of the prc file that defines that value.</p><p class="P33"> </p><p class="P33">  cvMgr.listVariables()</p><p class="P33"> </p><p class="P33">    Lists all of the variables currently known to the config system;</p><p class="P33">    that is, all variables for which a ConfigVariable instance has</p><p class="P33">    been created at runtime, whether or not its value has been changed</p><p class="P33">    from the default.  This may omit variables defined in some unused</p><p class="P51"> </p><p class="P33">    subsystem (like pandaegg, for instance), and it will omit</p><p class="P33">    variables defined by Python code which hasn't yet been executed</p><p class="P33">    (e.g. variables within defined with a function that hasn't yet  been called).</p><p class="P33">This will also omit variables deemed to be "dynamic" variables,</p><p class="P33">    for instance all of the notify-level-* variables, and variables</p><p class="P33">    such as pstats-active-*.  These are omitted simply to keep the</p><p class="P33">    list of variable names manageable, since the list of dynamic</p><p class="P33">    variable names tends to be very large.  Use</p><p class="P33">    cvMgr.listDynamicVariables() if you want to see these variable</p><p class="P33">    names.</p><p class="P33"> </p><p class="P33">  cvMgr.listUnusedVariables()</p><p class="P33"> </p><p class="P33">    Lists all of the variables that have been defined by some prc</p><p class="P33">    file, but which are not known to the config system (no</p><p class="P33">    ConfigVariable instance has yet been created for this variable).</p><p class="P33">    These variables may represent misspellings or typos in your prc</p><p class="P33">    file, or they may be old variables which are no longer used in the</p><p class="P33">    system.  However, they may also be legitimate variables for some</p><p class="P33">    subsystem or application which simply has not been loaded; there</p><p class="P33">    is no way for Panda to make this distinction.</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__RE-READING_PRC_FILES"><span/></a><a name="__RefHeading__31238_1927442421"/>RE-READING PRC FILES</h3><p class="P33"> </p><p class="P33">If you modify a prc file at some point after Panda has started, Panda</p><p class="P33">will not automatically know that it needs to reload its config files</p><p class="P33">and will not therefore automatically recognize your change.  However,</p><p class="P33">you can force this to happen by making the following call:</p><p class="P33"> </p><p class="P33">  ConfigPageManager::get_global_ptr()-&gt;reload_implicit_pages()</p><p class="P33"> </p><p class="P33">Or, in Python:</p><p class="P33"> </p><p class="P33">  cpMgr.reloadImplicitPages()</p><p class="P33"> </p><p class="P33">This will tell Panda to re-read all of the prc files it found</p><p class="P33">automatically at startup and update the variables' values accordingly.</p><p class="P33"> </p><p class="P45"> </p><h3 class="Heading_20_3"><a id="a__RUNTIME_PRC_FILE_MANAGEMENT"><span/></a><a name="__RefHeading__31240_1927442421"/>RUNTIME PRC FILE MANAGEMENT</h3><p class="P33"> </p><p class="P33">In addition to the prc files that are found and loaded automatically by Panda at startup, you can load files up at runtime as needed.  The</p><p class="P33">functions to manage this are defined in load_prc_file.h:</p><p class="P33"> </p><p class="P33">  ConfigPage *page = load_prc_file("myPage.prc")</p><p class="P33"> </p><p class="P33">  ...</p><p class="P33"> </p><p class="P33">  unload_prc_file(page);</p><p class="P33"> </p><p class="P33">(The above shows the C++ syntax; the corresponding Python code is</p><p class="P33">similar, but of course the functions are named loadPrcFile() and</p><p class="P33">unloadPrcFile().)</p><p class="P33"> </p><p class="P33">That is to say, you can call load_prc_file() to load up a new prc file</p><p class="P33">at any time.  Each file you load is added to a LIFO stack of prc</p><p class="P33">files.  If a variable is defined in more than one prc file, the</p><p class="P33">topmost file on the stack (i.e. the one most recently loaded) is the</p><p class="P33">one that defines the variable's value.</p><p class="P33"> </p><p class="P33">You can call unload_prc_file() at any time to unload a file that you</p><p class="P33">have previously loaded.  This removes the file from the stack and</p><p class="P33">allows any variables it modified to return to their previous value.</p><p class="P33">The single parameter to unload_prc_file() should be the pointer that</p><p class="P33">was returned from the corresponding call to load_prc_file().  Once you</p><p class="P33">have called unload_prc_file(), the pointer is invalid and should no</p><p class="P33">longer be used.  It is an error to call unload_prc_file() twice on the</p><p class="P33">same pointer.</p><p class="P33"> </p><p class="P33">The filename passed to load_prc_file() may refer to any file that is</p><p class="P33">on the standard prc file search path (e.g. $PRC_DIR), as well as on</p><p class="P33">the model-path.  It may be a physical file on disk, or a subfile of a</p><p class="P33">multifile (and mounted via Panda's virtual file system).</p><p class="P33"> </p><p class="P33">If your prc file is stored as an in-memory string instead of as a disk</p><p class="P33">file (for instance, maybe you just built it up), you can use the</p><p class="P33">load_prc_file_data() method to load the prc file from the string data.</p><p class="P33">The first parameter is an arbitrary name to assign to your in-memory</p><p class="P51"> </p><p class="P33">prc file; supply a filename if you have one, or use some other name</p><p class="P33">that is meaningful to you.</p><p class="P33"> </p><p class="P33">You can see the complete list of prc files that have been loaded into</p><p class="P33">the config system at any given time, including files loaded explicitly</p><p class="P33">via load_prc_file(), as well as files found in the standard prc file</p><p class="P33">search path and loaded implicitly at startup.  Simply use</p><p class="P33">ConfigPageManager::write(), e.g. in Python:</p><p class="P33"> </p><p class="P33">  print cpMgr</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__COMPILE-TIME_OPTIONS_FOR_FINDING_PRC_FILES"><span/></a><a name="__RefHeading__31242_1927442421"/>COMPILE-TIME OPTIONS FOR FINDING PRC FILES</h3><p class="P33"> </p><p class="P33">As described above in USING THE PRC FILES, Panda's default startup</p><p class="P33">behavior is to load all files named *.prc in the directory named by</p><p class="P33">the environment variable PRC_DIR.  This is actually a bit of an</p><p class="P33">oversimplification.  The complete default behavior is as follows:</p><p class="P33"> </p><p class="P33">(1) If PRC_PATH is set, separate it into a list of directories and</p><p class="P33">    make a search path out of it.</p><p class="P33"> </p><p class="P33">(2) If PRC_DIR is set, prepend it onto the search path defined by</p><p class="P33">    PRC_PATH, above.</p><p class="P33"> </p><p class="P33">(3) If neither was set, put the compiled-in value for DEFAULT_PRC_DIR,</p><p class="P33">    which is usually the install/etc directory, alone on the search</p><p class="P33">    path.</p><p class="P33"> </p><p class="P33">    Steps (1), (2), and (3) define what is referred to in this</p><p class="P33">    document as "the standard prc search path".  You can query this</p><p class="P33">    search path via cpMgr.getSearchPath().</p><p class="P33"> </p><p class="P33">(4) Look for all files named *.prc on each directory of the resulting</p><p class="P33">    search path, and load them up in reverse search path order, and</p><p class="P33">    within each directory, in forward alphabetical order.  This means</p><p class="P33">    that directories listed first on the search path override</p><p class="P33">    directories listed later, and within a directory, files</p><p class="P33">    alphabetically later override files alphabetically earlier.</p><p class="P51"> </p><p class="P33"> </p><p class="P33">This describes the default behavior, without any modifications to</p><p class="P33">Config.pp.  If you wish, you can further fine-tune each of the above</p><p class="P33">steps by defining various Config.pp variables at compile time.  The</p><p class="P33">following Config.pp variables may be defined:</p><p class="P33"> </p><p class="P33">#define PRC_PATH_ENVVARS PRC_PATH</p><p class="P33">#define PRC_DIR_ENVVARS PRC_DIR</p><p class="P33">These name the environment variable(s) to use instead of PRC_PATH</p><p class="P33">  and PRC_DIR.  In either case, you may name multiple environment</p><p class="P33">  variables separated by a space; each variable is consulted one at a</p><p class="P33">  time, in the order named, and the results are concatenated.</p><p class="P33"> </p><p class="P33">  For instance, if you put the following line in your Config.pp file:</p><p class="P33"> </p><p class="P33">  #define PRC_PATH_ENVVARS CFG_PATH ETC_PATH</p><p class="P33"> </p><p class="P33">  Then instead of checking $PRC_PATH in step (1), above, Panda will</p><p class="P33">  first check $CFG_PATH, and then $ETC_PATH, and the final search path</p><p class="P33">  will be the concatenation of both.</p><p class="P33"> </p><p class="P33">  You can also define either or both of PRC_PATH_ENVVARS or</p><p class="P33">  PRC_DIR_ENVVARS to the empty string; this will disable runtime</p><p class="P33">  checking of environment variables, and force all prc files to be</p><p class="P33">  loaded from the directory named by DEFAULT_PRC_DIR.</p><p class="P33"> </p><p class="P33">#define PRC_PATTERNS *.prc</p><p class="P33"> </p><p class="P33">  This describes the filename patterns that are used to identify prc</p><p class="P33">  files in each directory in step(4), above.  The default is *.prc,</p><p class="P33">  but you can change this if you have any reason to.  You can specify</p><p class="P33">  multiple filename patterns separated by a space.  For instance, if</p><p class="P33">  you still have some config files named "Configrc", following an</p><p class="P33">  older Panda convention, you can define the following in your</p><p class="P33">  Config.pp file:</p><p class="P33"> </p><p class="P33">  #define PRC_PATTERNS *.prc Configrc</p><p class="P33"> </p><p class="P33">  This will cause Panda to recognize files named "Configrc", as well</p><p class="P33">  as any file ending in the extension prc, as a legitimate prc file.</p><p class="P33"> </p><p class="P51"> </p><p class="P33">#define DEFAULT_PRC_DIR $[INSTALL_DIR]/etc</p><p class="P33"> </p><p class="P33">  This is the directory from which to load prc files if all of the</p><p class="P33">  variables named by PRC_PATH_ENVVARS and PRC_DIR_ENVVARS are</p><p class="P33">  undefined or empty.</p><p class="P33"> </p><p class="P33">#define DEFAULT_PATHSEP</p><p class="P33">  This doesn't strictly apply to the config system, since it globally</p><p class="P33">  affects search paths throughout Panda.  This specifies the character</p><p class="P33">  or characters used to separate the different directory names of a</p><p class="P33">  search path, for instance $PRC_PATH.  The default character is ':'</p><p class="P33">  on Unix, and ';' on Windows.  If you specify multiple characters,</p><p class="P33">  any of them may be used as a separator.</p><p class="P33"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__EXECUTABLE_PRC_FILES"><span/></a><a name="__RefHeading__31244_1927442421"/>EXECUTABLE PRC FILES</h3><p class="P33"> </p><p class="P33">One esoteric feature of Panda's config system is the ability to</p><p class="P33">automatically execute a standalone program which generates a prc file</p><p class="P33">as output.</p><p class="P33"> </p><p class="P33">This feature is not enabled by default.  To enable it, you must define</p><p class="P33">the Config.pp variable PRC_EXECUTABLE_PATTERNS before you build Panda.</p><p class="P33">This variable is similar to PRC_PATTERNS, described above, except it</p><p class="P33">names file names which, when found along the standard prc search path,</p><p class="P33">should be taken to be the name of an executable program.  Panda will</p><p class="P33">execute each of these programs, in the appropriate order according to</p><p class="P33">alphabetical sorting with the regular prc files, and whatever the</p><p class="P33">program writes to standard output is taken to be the contents of a prc</p><p class="P33">file.</p><p class="P33"> </p><p class="P33">By default the contents of the environment variable</p><p class="P33">$PRC_EXECUTABLE_ARGS are passed as arguments to the executable</p><p class="P33">program.  You can change this to a different environment variable by</p><p class="P33">redefining PRC_EXECUTABLE_ARGS_ENVVAR in your Config.pp (or prevent</p><p class="P33">the passing of arguments by defining this to the empty string).</p><p class="P33"> </p><p class="P51"> </p><p class="P33"> </p><h3 class="Heading_20_3"><a id="a__SIGNED_PRC_FILES"><span/></a><a name="__RefHeading__31246_1927442421"/>SIGNED PRC FILES</h3><p class="P33"> </p><p class="P33">Another esoteric feature of Panda's config system is the ability to</p><p class="P33">restrict certain config variables to modification only by a prc file</p><p class="P33">that has been provided by an authorized source.  This is primarily</p><p class="P33">useful when Panda is to be used for deployment of applications (games,</p><p class="P33">etc.) to a client; it has little utility in a fully trusted</p><p class="P33">environment.</p><p class="P33"> </p><p class="P33">When this feature is enabled, you can specify an optional trust level</p><p class="P33">to each ConfigVariable constructor.  The trust level is an integer</p><p class="P33">value, greater than 0 (and &lt;= ConfigFlags::F_trust_level_mask), which</p><p class="P33">should be or'ed in with the flags parameter.</p><p class="P33"> </p><p class="P33">A number of random keys must be generated ahead of time and compiled</p><p class="P33">into Panda; there must be a different key for each different trust</p><p class="P33">level.  Each prc file can then optionally be signed by exactly one of</p><p class="P33">the available keys.  When a prc file has been signed by a recognized</p><p class="P33">key, Panda assigns the corresponding trust level to that prc file.  An</p><p class="P33">unsigned prc file has an implicit trust level of 0.</p><p class="P33"> </p><p class="P33">If a signed prc file is modified in any way after it has been signed,</p><p class="P33">its signature will no longer match the contents of the file and its</p><p class="P33">trust level drops to 0.  The newly-modified file must be signed again</p><p class="P33">to restore its trust level.</p><p class="P33"> </p><p class="P33">When a ConfigVariable is constructed with a nonzero trust level, that</p><p class="P33">variable's value may then not be set by any prc file with a trust</p><p class="P33">level lower that the variable's trust level.  If a prc file with an</p><p class="P33">insufficient trust level attempts to modify the variable, the new</p><p class="P33">value is ignored, and the value from the previous trusted prc file (or</p><p class="P33">the variable's default value) is retained.</p><p class="P33"> </p><p class="P33">The default trust level for a ConfigVariable is 0, which means the</p><p class="P33">variable can be set by any prc file, signed or unsigned.  To set any</p><p class="P33">nonzero trust level, pass the integer trust level value as the flags</p><p class="P33">parameter to the ConfigVariable constructor.  To explicitly specify a</p><p class="P33">trust level of 0, pass ConfigFlags::F_open.</p><p class="P51"> </p><p class="P33"> </p><p class="P33">To specify a ConfigVariable that cannot be set by any prc files at</p><p class="P33">all, regardless of trust level, use ConfigFlags::F_closed.</p><p class="P33"> </p><p class="P33"> </p><p class="P33">This feature is not enabled by default.  It is somewhat complicated to</p><p class="P33">enable this feature, because doing so requres generating one or more</p><p class="P33">private/public key pairs, and compiling the public keys into the</p><p class="P33">low-level Panda system so that it can recognize signed prc files when</p><p class="P33">they are provided, and compiling the private keys into standalone</p><p class="P33">executables, one for each private key, that can be used to officially</p><p class="P33">sign approved prc files.  This initial setup therefore requires a bit</p><p class="P33">of back-and-forth building and rebuilding in the dtool directory.</p><p class="P33"> </p><p class="P33">To enable this feature, follow the following procedure.</p><p class="P33">(1) Decide how many different trust levels you require.  You can have</p><p class="P33">    as many as you want, but most applications will require only one</p><p class="P33">    trust level, or possibly two.  The rare application will require</p><p class="P33">    three or more.  If you decide to use multiple trust levels, you</p><p class="P33">    can make a distinction between config variables that are somewhat</p><p class="P33">    sensitive and those that are highly sensitive.</p><p class="P33"> </p><p class="P33">(2) Obtain and install the OpenSSL library, if it is not already</p><p class="P33">    installed (http://www.openssl.org).  Adjust your Config.pp file as</p><p class="P33">    necessary to point to the installed OpenSSL headers and libraries</p><p class="P33">    (in particular, define SSL_IPATH and SSL_LIBS), and then ppremake</p><p class="P33">    and make install your dtool tree.  It is not necessary to build</p><p class="P33">    the panda tree or any subsequent trees yet.</p><p class="P33"> </p><p class="P33">(3) Set up a directory to hold the generated public keys.  The</p><p class="P33">    contents of this directory must be accessible to anyone building</p><p class="P33">    Panda for your application; it also must have a lifetime at least</p><p class="P33">    as long as the lifetime of your application.  It probably makes</p><p class="P33">    sense to make this directory part of your application's source</p><p class="P33">    tree.  The contents of this directory will not be particularly</p><p class="P33">    sensitive and need not be kept any more secret than the rest of</p><p class="P33">    your application's source code.</p><p class="P33"> </p><p class="P33">(4) Set up a directory in a secure place to hold the generated private</p><p class="P33">    keys.  The contents of this directory should be regarded as</p><p class="P33">    somewhat sensitive, and should not be available to more than a</p><p class="P51"> </p><p class="P33">    manageable number of developers.  It need not be accessible to</p><p class="P33">    people building Panda.  However, this directory should have a</p><p class="P33">    lifetime as long as the lifetime of your application.  Depending</p><p class="P33">    on your environment, it may or may not make sense to make this</p><p class="P33">    directory a part of your application's source tree; it can be the</p><p class="P33">    same directory as that chosen for (3), above.</p><p class="P33"> </p><p class="P33">(5) Run the program make-prc-key.  This program generates the public</p><p class="P33">    and private key pairs for each of your trust levels.  The</p><p class="P33">    following is an example:</p><p class="P33"> </p><p class="P33">    make-prc-key -a &lt;pubdir&gt;/keys.cxx -b &lt;privdir&gt;/sign#.cxx 1 2</p><p class="P33"> </p><p class="P33">    The output of make-prc-key will be compilable C++ source code.</p><p class="P33">    The first parameter, -a, specifies the name of the public key</p><p class="P33">output file.  This file will contain all of the public keys for</p><p class="P33">    the different trust levels, and will become part of the libdtool</p><p class="P33">    library.  It is not particularly sensitive, and must be accessible</p><p class="P33">    to anyone who will be compiling dtool.</p><p class="P33"> </p><p class="P33">    The second parameter, -b, specifies a collection of output files,</p><p class="P33">    one for each trust level.  Each file can be compiled as a</p><p class="P33">    standalone program (that links with libdtool); the resulting</p><p class="P33">    program can then be used to sign any prc files with the</p><p class="P33">    corresponding trust level.  The hash character '#' appearing in</p><p class="P33">    the filename will be filled in with the numeric trust level.</p><p class="P33"> </p><p class="P33">    The remaining arguments to make-prc-key are the list of trust</p><p class="P33">    levels to generate key pairs for.  In the example above, we are</p><p class="P33">    generating two key pairs, for trust level 1 and for trust level 2.</p><p class="P33"> </p><p class="P33">    The program will prompt you to enter a pass phrase for each</p><p class="P33">    private key.  This pass phrase is used to encrypt the private key</p><p class="P33">    as written into the output file, to reduce the sensitivity of the</p><p class="P33">    prc signing program (and its source code).  The user of the</p><p class="P33">    signing program must re-enter this pass phrase in order to sign a</p><p class="P33">    prc file.  You may specify a different pass phrase for each trust</p><p class="P33">    level, or you may use the -p "pass phrase" command-line option to</p><p class="P33">    provide the same pass phrase for all trust levels.  If you do not</p><p class="P33">    want to use the pass phrase feature at all, use -p "", and keep</p><p class="P33">    the generated programs in a safe place.</p><p class="P51"> </p><p class="P33"> </p><p class="P33">(6) Modify your Config.pp file (for yourself, and for anyone else who</p><p class="P33">    will be building dtool for your application) to add the following</p><p class="P33">    line:</p><p class="P33"> </p><p class="P33">    #define PRC_PUBLIC_KEYS_FILENAME &lt;pubdir&gt;/keys.cxx</p><p class="P33"> </p><p class="P33">    Where &lt;pubdir&gt;/keys.cxx is the file named by -a, above.</p><p class="P33"> </p><p class="P33">    Consider whether you want to enforce the trust level in the</p><p class="P33">    development environment.  The default is to respect the trust</p><p class="P33">    level only when Panda is compiled for a release build, i.e. when</p><p class="P33">    OPTIMIZE is set to 4.  You can redefine PRC_RESPECT_TRUST_LEVEL if</p><p class="P33">    you want to change this default behavior.</p><p class="P33"> </p><p class="P33">    Re-run ppremake and then make install in dtool.</p><p class="P33">(7) Set up a Sources.pp file in your private key directory to compile</p><p class="P33">    the files named by -b against dtool.  It should contain an entry</p><p class="P33">    something like these for each trust level:</p><p class="P33">    </p><p class="P33">    #begin bin_target</p><p class="P33">      #define OTHER_LIBS dtool</p><p class="P33">      #define USE_PACKAGES ssl</p><p class="P33">      #define TARGET sign1</p><p class="P33">      #define SOURCES sign1.cxx</p><p class="P33">    #end bin_target</p><p class="P33"> </p><p class="P33">    #begin bin_target</p><p class="P33">      #define OTHER_LIBS dtool</p><p class="P33">      #define USE_PACKAGES ssl</p><p class="P33">      #define TARGET sign2</p><p class="P33">      #define SOURCES sign2.cxx</p><p class="P33">    #end bin_target</p><p class="P33"> </p><p class="P33">(8) If your private key directory is not a part of your application</p><p class="P33">    source hierarchy (or your application does not use ppremake),</p><p class="P33">    create a Package.pp in the same directory to mark the root of a</p><p class="P33">    ppremake source tree.  You can simply copy the Package.pp file</p><p class="P33">    from panda/Package.pp.  You do not need to do this if your private</p><p class="P33">    key directory is already part of a ppremake-controlled source</p><p class="P33">    hierarchy.</p><p class="P51"> </p><p class="P33"> </p><p class="P33">(9) Run ppremake and then make install in the private key directory.</p><p class="P33">    This will generate the programs sign1 and sign2 (or whatever you</p><p class="P33">    have named them).  Distribute these programs to the appropriate</p><p class="P33">    people who have need to sign prc files, and tell them the pass</p><p class="P33">    phrases that you used to generate them.</p><p class="P33"> </p><p class="P33">(10) Build the rest of the Panda trees normally.</p><p class="P33"> </p><p class="P33">Advanced tip: if you follow the directions above, your sign1 and sign2</p><p class="P33">programs will require libdtool.dll at runtime, and may need to be</p><p class="P33">recompiled from time to time if you get a new version of dtool.  To</p><p class="P33">avoid this, you can link these programs statically, so that they are</p><p class="P33">completely standalone.  This requires one more back-and-forth</p><p class="P33">rebuilding of dtool:</p><p class="P33">(a) Put the following line in your Config.pp file:</p><p class="P33"> </p><p class="P33">   #define LINK_ALL_STATIC 1</p><p class="P33"> </p><p class="P33">(b) Run ppremake and make clean install in dtool.  Note that you must</p><p class="P33">    make clean.  This will generate a static version of libdtool.lib.</p><p class="P33"> </p><p class="P33">(c) Run ppremake and make clean install in your private key directory,</p><p class="P33">    to recompile the sign programs against the new static libdtool.lib.</p><p class="P33"> </p><p class="P33">(d) Remove (or comment out) the LINK_ALL_STATIC line in your Config.pp</p><p class="P33">    file.</p><p class="P33"> </p><p class="P33">(e) Run ppremake and make clean install in dtool to restore the normal</p><p class="P33">    dynamic library, so that future builds of panda and the rest of</p><p class="P33">    your application will use the dynamic libdtool.dll properly.</p><p class="P51"> </p></body></html>